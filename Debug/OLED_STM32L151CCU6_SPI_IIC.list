
OLED_STM32L151CCU6_SPI_IIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002464  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000874  080025a0  080025a0  000125a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e14  08002e14  0002062c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e14  08002e14  0002062c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e14  08002e14  0002062c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e14  08002e14  00012e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e18  08002e18  00012e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000062c  20000000  08002e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000062c  08003448  0002062c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  08003448  000206f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002062c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000897e  00000000  00000000  00020655  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000153a  00000000  00000000  00028fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f8  00000000  00000000  0002a510  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000848  00000000  00000000  0002ae08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014a2a  00000000  00000000  0002b650  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007334  00000000  00000000  0004007a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080984  00000000  00000000  000473ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7d32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002414  00000000  00000000  000c7db0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000062c 	.word	0x2000062c
 8000158:	00000000 	.word	0x00000000
 800015c:	08002588 	.word	0x08002588

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000630 	.word	0x20000630
 8000178:	08002588 	.word	0x08002588

0800017c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000182:	2300      	movs	r3, #0
 8000184:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000186:	2003      	movs	r0, #3
 8000188:	f000 f938 	bl	80003fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800018c:	2000      	movs	r0, #0
 800018e:	f000 f80d 	bl	80001ac <HAL_InitTick>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d002      	beq.n	800019e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000198:	2301      	movs	r3, #1
 800019a:	71fb      	strb	r3, [r7, #7]
 800019c:	e001      	b.n	80001a2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800019e:	f002 f88d 	bl	80022bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001a2:	79fb      	ldrb	r3, [r7, #7]
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	3708      	adds	r7, #8
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}

080001ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80001b4:	2300      	movs	r3, #0
 80001b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80001b8:	4b16      	ldr	r3, [pc, #88]	; (8000214 <HAL_InitTick+0x68>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d022      	beq.n	8000206 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80001c0:	4b15      	ldr	r3, [pc, #84]	; (8000218 <HAL_InitTick+0x6c>)
 80001c2:	681a      	ldr	r2, [r3, #0]
 80001c4:	4b13      	ldr	r3, [pc, #76]	; (8000214 <HAL_InitTick+0x68>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80001d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80001d4:	4618      	mov	r0, r3
 80001d6:	f000 f938 	bl	800044a <HAL_SYSTICK_Config>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d10f      	bne.n	8000200 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2b0f      	cmp	r3, #15
 80001e4:	d809      	bhi.n	80001fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001e6:	2200      	movs	r2, #0
 80001e8:	6879      	ldr	r1, [r7, #4]
 80001ea:	f04f 30ff 	mov.w	r0, #4294967295
 80001ee:	f000 f910 	bl	8000412 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80001f2:	4a0a      	ldr	r2, [pc, #40]	; (800021c <HAL_InitTick+0x70>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	6013      	str	r3, [r2, #0]
 80001f8:	e007      	b.n	800020a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80001fa:	2301      	movs	r3, #1
 80001fc:	73fb      	strb	r3, [r7, #15]
 80001fe:	e004      	b.n	800020a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000200:	2301      	movs	r3, #1
 8000202:	73fb      	strb	r3, [r7, #15]
 8000204:	e001      	b.n	800020a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000206:	2301      	movs	r3, #1
 8000208:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800020a:	7bfb      	ldrb	r3, [r7, #15]
}
 800020c:	4618      	mov	r0, r3
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	20000004 	.word	0x20000004
 8000218:	20000628 	.word	0x20000628
 800021c:	20000000 	.word	0x20000000

08000220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000224:	4b05      	ldr	r3, [pc, #20]	; (800023c <HAL_IncTick+0x1c>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b05      	ldr	r3, [pc, #20]	; (8000240 <HAL_IncTick+0x20>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4413      	add	r3, r2
 800022e:	4a03      	ldr	r2, [pc, #12]	; (800023c <HAL_IncTick+0x1c>)
 8000230:	6013      	str	r3, [r2, #0]
}
 8000232:	bf00      	nop
 8000234:	46bd      	mov	sp, r7
 8000236:	bc80      	pop	{r7}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20000648 	.word	0x20000648
 8000240:	20000004 	.word	0x20000004

08000244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  return uwTick;
 8000248:	4b02      	ldr	r3, [pc, #8]	; (8000254 <HAL_GetTick+0x10>)
 800024a:	681b      	ldr	r3, [r3, #0]
}
 800024c:	4618      	mov	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	20000648 	.word	0x20000648

08000258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000260:	f7ff fff0 	bl	8000244 <HAL_GetTick>
 8000264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000270:	d004      	beq.n	800027c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <HAL_Delay+0x40>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	68fa      	ldr	r2, [r7, #12]
 8000278:	4413      	add	r3, r2
 800027a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800027c:	bf00      	nop
 800027e:	f7ff ffe1 	bl	8000244 <HAL_GetTick>
 8000282:	4602      	mov	r2, r0
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	1ad3      	subs	r3, r2, r3
 8000288:	68fa      	ldr	r2, [r7, #12]
 800028a:	429a      	cmp	r2, r3
 800028c:	d8f7      	bhi.n	800027e <HAL_Delay+0x26>
  {
  }
}
 800028e:	bf00      	nop
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000004 	.word	0x20000004

0800029c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f003 0307 	and.w	r3, r3, #7
 80002aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002ac:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <__NVIC_SetPriorityGrouping+0x44>)
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002b2:	68ba      	ldr	r2, [r7, #8]
 80002b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002b8:	4013      	ands	r3, r2
 80002ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002ce:	4a04      	ldr	r2, [pc, #16]	; (80002e0 <__NVIC_SetPriorityGrouping+0x44>)
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	60d3      	str	r3, [r2, #12]
}
 80002d4:	bf00      	nop
 80002d6:	3714      	adds	r7, #20
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	e000ed00 	.word	0xe000ed00

080002e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002e8:	4b04      	ldr	r3, [pc, #16]	; (80002fc <__NVIC_GetPriorityGrouping+0x18>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	0a1b      	lsrs	r3, r3, #8
 80002ee:	f003 0307 	and.w	r3, r3, #7
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	6039      	str	r1, [r7, #0]
 800030a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800030c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000310:	2b00      	cmp	r3, #0
 8000312:	db0a      	blt.n	800032a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	b2da      	uxtb	r2, r3
 8000318:	490c      	ldr	r1, [pc, #48]	; (800034c <__NVIC_SetPriority+0x4c>)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	0112      	lsls	r2, r2, #4
 8000320:	b2d2      	uxtb	r2, r2
 8000322:	440b      	add	r3, r1
 8000324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000328:	e00a      	b.n	8000340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	b2da      	uxtb	r2, r3
 800032e:	4908      	ldr	r1, [pc, #32]	; (8000350 <__NVIC_SetPriority+0x50>)
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	f003 030f 	and.w	r3, r3, #15
 8000336:	3b04      	subs	r3, #4
 8000338:	0112      	lsls	r2, r2, #4
 800033a:	b2d2      	uxtb	r2, r2
 800033c:	440b      	add	r3, r1
 800033e:	761a      	strb	r2, [r3, #24]
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	e000e100 	.word	0xe000e100
 8000350:	e000ed00 	.word	0xe000ed00

08000354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000354:	b480      	push	{r7}
 8000356:	b089      	sub	sp, #36	; 0x24
 8000358:	af00      	add	r7, sp, #0
 800035a:	60f8      	str	r0, [r7, #12]
 800035c:	60b9      	str	r1, [r7, #8]
 800035e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	f003 0307 	and.w	r3, r3, #7
 8000366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000368:	69fb      	ldr	r3, [r7, #28]
 800036a:	f1c3 0307 	rsb	r3, r3, #7
 800036e:	2b04      	cmp	r3, #4
 8000370:	bf28      	it	cs
 8000372:	2304      	movcs	r3, #4
 8000374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000376:	69fb      	ldr	r3, [r7, #28]
 8000378:	3304      	adds	r3, #4
 800037a:	2b06      	cmp	r3, #6
 800037c:	d902      	bls.n	8000384 <NVIC_EncodePriority+0x30>
 800037e:	69fb      	ldr	r3, [r7, #28]
 8000380:	3b03      	subs	r3, #3
 8000382:	e000      	b.n	8000386 <NVIC_EncodePriority+0x32>
 8000384:	2300      	movs	r3, #0
 8000386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000388:	f04f 32ff 	mov.w	r2, #4294967295
 800038c:	69bb      	ldr	r3, [r7, #24]
 800038e:	fa02 f303 	lsl.w	r3, r2, r3
 8000392:	43da      	mvns	r2, r3
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	401a      	ands	r2, r3
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800039c:	f04f 31ff 	mov.w	r1, #4294967295
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	fa01 f303 	lsl.w	r3, r1, r3
 80003a6:	43d9      	mvns	r1, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003ac:	4313      	orrs	r3, r2
         );
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3724      	adds	r7, #36	; 0x24
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr

080003b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003c8:	d301      	bcc.n	80003ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ca:	2301      	movs	r3, #1
 80003cc:	e00f      	b.n	80003ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003ce:	4a0a      	ldr	r2, [pc, #40]	; (80003f8 <SysTick_Config+0x40>)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	3b01      	subs	r3, #1
 80003d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003d6:	210f      	movs	r1, #15
 80003d8:	f04f 30ff 	mov.w	r0, #4294967295
 80003dc:	f7ff ff90 	bl	8000300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <SysTick_Config+0x40>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003e6:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <SysTick_Config+0x40>)
 80003e8:	2207      	movs	r2, #7
 80003ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003ec:	2300      	movs	r3, #0
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	e000e010 	.word	0xe000e010

080003fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000404:	6878      	ldr	r0, [r7, #4]
 8000406:	f7ff ff49 	bl	800029c <__NVIC_SetPriorityGrouping>
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b086      	sub	sp, #24
 8000416:	af00      	add	r7, sp, #0
 8000418:	4603      	mov	r3, r0
 800041a:	60b9      	str	r1, [r7, #8]
 800041c:	607a      	str	r2, [r7, #4]
 800041e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000420:	2300      	movs	r3, #0
 8000422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000424:	f7ff ff5e 	bl	80002e4 <__NVIC_GetPriorityGrouping>
 8000428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	68b9      	ldr	r1, [r7, #8]
 800042e:	6978      	ldr	r0, [r7, #20]
 8000430:	f7ff ff90 	bl	8000354 <NVIC_EncodePriority>
 8000434:	4602      	mov	r2, r0
 8000436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800043a:	4611      	mov	r1, r2
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff ff5f 	bl	8000300 <__NVIC_SetPriority>
}
 8000442:	bf00      	nop
 8000444:	3718      	adds	r7, #24
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b082      	sub	sp, #8
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	f7ff ffb0 	bl	80003b8 <SysTick_Config>
 8000458:	4603      	mov	r3, r0
}
 800045a:	4618      	mov	r0, r3
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000464:	b480      	push	{r7}
 8000466:	b087      	sub	sp, #28
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800046e:	2300      	movs	r3, #0
 8000470:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000476:	2300      	movs	r3, #0
 8000478:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800047a:	e154      	b.n	8000726 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	2101      	movs	r1, #1
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	fa01 f303 	lsl.w	r3, r1, r3
 8000488:	4013      	ands	r3, r2
 800048a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	2b00      	cmp	r3, #0
 8000490:	f000 8146 	beq.w	8000720 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	2b02      	cmp	r3, #2
 800049a:	d003      	beq.n	80004a4 <HAL_GPIO_Init+0x40>
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	685b      	ldr	r3, [r3, #4]
 80004a0:	2b12      	cmp	r3, #18
 80004a2:	d123      	bne.n	80004ec <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	08da      	lsrs	r2, r3, #3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	3208      	adds	r2, #8
 80004ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	f003 0307 	and.w	r3, r3, #7
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	220f      	movs	r2, #15
 80004bc:	fa02 f303 	lsl.w	r3, r2, r3
 80004c0:	43db      	mvns	r3, r3
 80004c2:	693a      	ldr	r2, [r7, #16]
 80004c4:	4013      	ands	r3, r2
 80004c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	691a      	ldr	r2, [r3, #16]
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	f003 0307 	and.w	r3, r3, #7
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	fa02 f303 	lsl.w	r3, r2, r3
 80004d8:	693a      	ldr	r2, [r7, #16]
 80004da:	4313      	orrs	r3, r2
 80004dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	08da      	lsrs	r2, r3, #3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	3208      	adds	r2, #8
 80004e6:	6939      	ldr	r1, [r7, #16]
 80004e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	2203      	movs	r2, #3
 80004f8:	fa02 f303 	lsl.w	r3, r2, r3
 80004fc:	43db      	mvns	r3, r3
 80004fe:	693a      	ldr	r2, [r7, #16]
 8000500:	4013      	ands	r3, r2
 8000502:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	f003 0203 	and.w	r2, r3, #3
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	fa02 f303 	lsl.w	r3, r2, r3
 8000514:	693a      	ldr	r2, [r7, #16]
 8000516:	4313      	orrs	r3, r2
 8000518:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	693a      	ldr	r2, [r7, #16]
 800051e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d00b      	beq.n	8000540 <HAL_GPIO_Init+0xdc>
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	2b02      	cmp	r3, #2
 800052e:	d007      	beq.n	8000540 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000534:	2b11      	cmp	r3, #17
 8000536:	d003      	beq.n	8000540 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	2b12      	cmp	r3, #18
 800053e:	d130      	bne.n	80005a2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	2203      	movs	r2, #3
 800054c:	fa02 f303 	lsl.w	r3, r2, r3
 8000550:	43db      	mvns	r3, r3
 8000552:	693a      	ldr	r2, [r7, #16]
 8000554:	4013      	ands	r3, r2
 8000556:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	68da      	ldr	r2, [r3, #12]
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	fa02 f303 	lsl.w	r3, r2, r3
 8000564:	693a      	ldr	r2, [r7, #16]
 8000566:	4313      	orrs	r3, r2
 8000568:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	693a      	ldr	r2, [r7, #16]
 800056e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000576:	2201      	movs	r2, #1
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	fa02 f303 	lsl.w	r3, r2, r3
 800057e:	43db      	mvns	r3, r3
 8000580:	693a      	ldr	r2, [r7, #16]
 8000582:	4013      	ands	r3, r2
 8000584:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	091b      	lsrs	r3, r3, #4
 800058c:	f003 0201 	and.w	r2, r3, #1
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	fa02 f303 	lsl.w	r3, r2, r3
 8000596:	693a      	ldr	r2, [r7, #16]
 8000598:	4313      	orrs	r3, r2
 800059a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	68db      	ldr	r3, [r3, #12]
 80005a6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	2203      	movs	r2, #3
 80005ae:	fa02 f303 	lsl.w	r3, r2, r3
 80005b2:	43db      	mvns	r3, r3
 80005b4:	693a      	ldr	r2, [r7, #16]
 80005b6:	4013      	ands	r3, r2
 80005b8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	689a      	ldr	r2, [r3, #8]
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	fa02 f303 	lsl.w	r3, r2, r3
 80005c6:	693a      	ldr	r2, [r7, #16]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005da:	2b00      	cmp	r3, #0
 80005dc:	f000 80a0 	beq.w	8000720 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e0:	4b57      	ldr	r3, [pc, #348]	; (8000740 <HAL_GPIO_Init+0x2dc>)
 80005e2:	6a1b      	ldr	r3, [r3, #32]
 80005e4:	4a56      	ldr	r2, [pc, #344]	; (8000740 <HAL_GPIO_Init+0x2dc>)
 80005e6:	f043 0301 	orr.w	r3, r3, #1
 80005ea:	6213      	str	r3, [r2, #32]
 80005ec:	4b54      	ldr	r3, [pc, #336]	; (8000740 <HAL_GPIO_Init+0x2dc>)
 80005ee:	6a1b      	ldr	r3, [r3, #32]
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 80005f8:	4a52      	ldr	r2, [pc, #328]	; (8000744 <HAL_GPIO_Init+0x2e0>)
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	089b      	lsrs	r3, r3, #2
 80005fe:	3302      	adds	r3, #2
 8000600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000604:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	f003 0303 	and.w	r3, r3, #3
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	220f      	movs	r2, #15
 8000610:	fa02 f303 	lsl.w	r3, r2, r3
 8000614:	43db      	mvns	r3, r3
 8000616:	693a      	ldr	r2, [r7, #16]
 8000618:	4013      	ands	r3, r2
 800061a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a4a      	ldr	r2, [pc, #296]	; (8000748 <HAL_GPIO_Init+0x2e4>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d019      	beq.n	8000658 <HAL_GPIO_Init+0x1f4>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a49      	ldr	r2, [pc, #292]	; (800074c <HAL_GPIO_Init+0x2e8>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d013      	beq.n	8000654 <HAL_GPIO_Init+0x1f0>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a48      	ldr	r2, [pc, #288]	; (8000750 <HAL_GPIO_Init+0x2ec>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d00d      	beq.n	8000650 <HAL_GPIO_Init+0x1ec>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a47      	ldr	r2, [pc, #284]	; (8000754 <HAL_GPIO_Init+0x2f0>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d007      	beq.n	800064c <HAL_GPIO_Init+0x1e8>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a46      	ldr	r2, [pc, #280]	; (8000758 <HAL_GPIO_Init+0x2f4>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d101      	bne.n	8000648 <HAL_GPIO_Init+0x1e4>
 8000644:	2304      	movs	r3, #4
 8000646:	e008      	b.n	800065a <HAL_GPIO_Init+0x1f6>
 8000648:	2305      	movs	r3, #5
 800064a:	e006      	b.n	800065a <HAL_GPIO_Init+0x1f6>
 800064c:	2303      	movs	r3, #3
 800064e:	e004      	b.n	800065a <HAL_GPIO_Init+0x1f6>
 8000650:	2302      	movs	r3, #2
 8000652:	e002      	b.n	800065a <HAL_GPIO_Init+0x1f6>
 8000654:	2301      	movs	r3, #1
 8000656:	e000      	b.n	800065a <HAL_GPIO_Init+0x1f6>
 8000658:	2300      	movs	r3, #0
 800065a:	697a      	ldr	r2, [r7, #20]
 800065c:	f002 0203 	and.w	r2, r2, #3
 8000660:	0092      	lsls	r2, r2, #2
 8000662:	4093      	lsls	r3, r2
 8000664:	693a      	ldr	r2, [r7, #16]
 8000666:	4313      	orrs	r3, r2
 8000668:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800066a:	4936      	ldr	r1, [pc, #216]	; (8000744 <HAL_GPIO_Init+0x2e0>)
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	089b      	lsrs	r3, r3, #2
 8000670:	3302      	adds	r3, #2
 8000672:	693a      	ldr	r2, [r7, #16]
 8000674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000678:	4b38      	ldr	r3, [pc, #224]	; (800075c <HAL_GPIO_Init+0x2f8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	43db      	mvns	r3, r3
 8000682:	693a      	ldr	r2, [r7, #16]
 8000684:	4013      	ands	r3, r2
 8000686:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000690:	2b00      	cmp	r3, #0
 8000692:	d003      	beq.n	800069c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent); 
 8000694:	693a      	ldr	r2, [r7, #16]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	4313      	orrs	r3, r2
 800069a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800069c:	4a2f      	ldr	r2, [pc, #188]	; (800075c <HAL_GPIO_Init+0x2f8>)
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80006a2:	4b2e      	ldr	r3, [pc, #184]	; (800075c <HAL_GPIO_Init+0x2f8>)
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	43db      	mvns	r3, r3
 80006ac:	693a      	ldr	r2, [r7, #16]
 80006ae:	4013      	ands	r3, r2
 80006b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d003      	beq.n	80006c6 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent); 
 80006be:	693a      	ldr	r2, [r7, #16]
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006c6:	4a25      	ldr	r2, [pc, #148]	; (800075c <HAL_GPIO_Init+0x2f8>)
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006cc:	4b23      	ldr	r3, [pc, #140]	; (800075c <HAL_GPIO_Init+0x2f8>)
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	43db      	mvns	r3, r3
 80006d6:	693a      	ldr	r2, [r7, #16]
 80006d8:	4013      	ands	r3, r2
 80006da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d003      	beq.n	80006f0 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent); 
 80006e8:	693a      	ldr	r2, [r7, #16]
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80006f0:	4a1a      	ldr	r2, [pc, #104]	; (800075c <HAL_GPIO_Init+0x2f8>)
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <HAL_GPIO_Init+0x2f8>)
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	43db      	mvns	r3, r3
 8000700:	693a      	ldr	r2, [r7, #16]
 8000702:	4013      	ands	r3, r2
 8000704:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800070e:	2b00      	cmp	r3, #0
 8000710:	d003      	beq.n	800071a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent); 
 8000712:	693a      	ldr	r2, [r7, #16]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4313      	orrs	r3, r2
 8000718:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800071a:	4a10      	ldr	r2, [pc, #64]	; (800075c <HAL_GPIO_Init+0x2f8>)
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	3301      	adds	r3, #1
 8000724:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	fa22 f303 	lsr.w	r3, r2, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	f47f aea3 	bne.w	800047c <HAL_GPIO_Init+0x18>
  } 
}
 8000736:	bf00      	nop
 8000738:	371c      	adds	r7, #28
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	40023800 	.word	0x40023800
 8000744:	40010000 	.word	0x40010000
 8000748:	40020000 	.word	0x40020000
 800074c:	40020400 	.word	0x40020400
 8000750:	40020800 	.word	0x40020800
 8000754:	40020c00 	.word	0x40020c00
 8000758:	40021000 	.word	0x40021000
 800075c:	40010400 	.word	0x40010400

08000760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	807b      	strh	r3, [r7, #2]
 800076c:	4613      	mov	r3, r2
 800076e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000770:	787b      	ldrb	r3, [r7, #1]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d003      	beq.n	800077e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000776:	887a      	ldrh	r2, [r7, #2]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800077c:	e003      	b.n	8000786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800077e:	887b      	ldrh	r3, [r7, #2]
 8000780:	041a      	lsls	r2, r3, #16
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	619a      	str	r2, [r3, #24]
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d101      	bne.n	80007a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e10f      	b.n	80009c2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d106      	bne.n	80007bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f001 fdae 	bl	8002318 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2224      	movs	r2, #36	; 0x24
 80007c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f022 0201 	bic.w	r2, r2, #1
 80007d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80007d4:	f001 f8d4 	bl	8001980 <HAL_RCC_GetPCLK1Freq>
 80007d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	4a7b      	ldr	r2, [pc, #492]	; (80009cc <HAL_I2C_Init+0x23c>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d807      	bhi.n	80007f4 <HAL_I2C_Init+0x64>
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	4a7a      	ldr	r2, [pc, #488]	; (80009d0 <HAL_I2C_Init+0x240>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	bf94      	ite	ls
 80007ec:	2301      	movls	r3, #1
 80007ee:	2300      	movhi	r3, #0
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	e006      	b.n	8000802 <HAL_I2C_Init+0x72>
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	4a77      	ldr	r2, [pc, #476]	; (80009d4 <HAL_I2C_Init+0x244>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	bf94      	ite	ls
 80007fc:	2301      	movls	r3, #1
 80007fe:	2300      	movhi	r3, #0
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
 8000808:	e0db      	b.n	80009c2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	4a72      	ldr	r2, [pc, #456]	; (80009d8 <HAL_I2C_Init+0x248>)
 800080e:	fba2 2303 	umull	r2, r3, r2, r3
 8000812:	0c9b      	lsrs	r3, r3, #18
 8000814:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	68ba      	ldr	r2, [r7, #8]
 8000826:	430a      	orrs	r2, r1
 8000828:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	6a1b      	ldr	r3, [r3, #32]
 8000830:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	4a64      	ldr	r2, [pc, #400]	; (80009cc <HAL_I2C_Init+0x23c>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d802      	bhi.n	8000844 <HAL_I2C_Init+0xb4>
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	3301      	adds	r3, #1
 8000842:	e009      	b.n	8000858 <HAL_I2C_Init+0xc8>
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800084a:	fb02 f303 	mul.w	r3, r2, r3
 800084e:	4a63      	ldr	r2, [pc, #396]	; (80009dc <HAL_I2C_Init+0x24c>)
 8000850:	fba2 2303 	umull	r2, r3, r2, r3
 8000854:	099b      	lsrs	r3, r3, #6
 8000856:	3301      	adds	r3, #1
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	6812      	ldr	r2, [r2, #0]
 800085c:	430b      	orrs	r3, r1
 800085e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800086a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	4956      	ldr	r1, [pc, #344]	; (80009cc <HAL_I2C_Init+0x23c>)
 8000874:	428b      	cmp	r3, r1
 8000876:	d80d      	bhi.n	8000894 <HAL_I2C_Init+0x104>
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	1e59      	subs	r1, r3, #1
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	fbb1 f3f3 	udiv	r3, r1, r3
 8000886:	3301      	adds	r3, #1
 8000888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800088c:	2b04      	cmp	r3, #4
 800088e:	bf38      	it	cc
 8000890:	2304      	movcc	r3, #4
 8000892:	e04f      	b.n	8000934 <HAL_I2C_Init+0x1a4>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d111      	bne.n	80008c0 <HAL_I2C_Init+0x130>
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	1e58      	subs	r0, r3, #1
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6859      	ldr	r1, [r3, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	440b      	add	r3, r1
 80008aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80008ae:	3301      	adds	r3, #1
 80008b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	bf0c      	ite	eq
 80008b8:	2301      	moveq	r3, #1
 80008ba:	2300      	movne	r3, #0
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	e012      	b.n	80008e6 <HAL_I2C_Init+0x156>
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	1e58      	subs	r0, r3, #1
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6859      	ldr	r1, [r3, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	440b      	add	r3, r1
 80008ce:	0099      	lsls	r1, r3, #2
 80008d0:	440b      	add	r3, r1
 80008d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80008d6:	3301      	adds	r3, #1
 80008d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008dc:	2b00      	cmp	r3, #0
 80008de:	bf0c      	ite	eq
 80008e0:	2301      	moveq	r3, #1
 80008e2:	2300      	movne	r3, #0
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <HAL_I2C_Init+0x15e>
 80008ea:	2301      	movs	r3, #1
 80008ec:	e022      	b.n	8000934 <HAL_I2C_Init+0x1a4>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d10e      	bne.n	8000914 <HAL_I2C_Init+0x184>
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	1e58      	subs	r0, r3, #1
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6859      	ldr	r1, [r3, #4]
 80008fe:	460b      	mov	r3, r1
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	440b      	add	r3, r1
 8000904:	fbb0 f3f3 	udiv	r3, r0, r3
 8000908:	3301      	adds	r3, #1
 800090a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800090e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000912:	e00f      	b.n	8000934 <HAL_I2C_Init+0x1a4>
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	1e58      	subs	r0, r3, #1
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6859      	ldr	r1, [r3, #4]
 800091c:	460b      	mov	r3, r1
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	440b      	add	r3, r1
 8000922:	0099      	lsls	r1, r3, #2
 8000924:	440b      	add	r3, r1
 8000926:	fbb0 f3f3 	udiv	r3, r0, r3
 800092a:	3301      	adds	r3, #1
 800092c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000930:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000934:	6879      	ldr	r1, [r7, #4]
 8000936:	6809      	ldr	r1, [r1, #0]
 8000938:	4313      	orrs	r3, r2
 800093a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	69da      	ldr	r2, [r3, #28]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6a1b      	ldr	r3, [r3, #32]
 800094e:	431a      	orrs	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	430a      	orrs	r2, r1
 8000956:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000962:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	6911      	ldr	r1, [r2, #16]
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	68d2      	ldr	r2, [r2, #12]
 800096e:	4311      	orrs	r1, r2
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	6812      	ldr	r2, [r2, #0]
 8000974:	430b      	orrs	r3, r1
 8000976:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	695a      	ldr	r2, [r3, #20]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	431a      	orrs	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	430a      	orrs	r2, r1
 8000992:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f042 0201 	orr.w	r2, r2, #1
 80009a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2200      	movs	r2, #0
 80009a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2220      	movs	r2, #32
 80009ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2200      	movs	r2, #0
 80009b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2200      	movs	r2, #0
 80009bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	000186a0 	.word	0x000186a0
 80009d0:	001e847f 	.word	0x001e847f
 80009d4:	003d08ff 	.word	0x003d08ff
 80009d8:	431bde83 	.word	0x431bde83
 80009dc:	10624dd3 	.word	0x10624dd3

080009e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af02      	add	r7, sp, #8
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	4608      	mov	r0, r1
 80009ea:	4611      	mov	r1, r2
 80009ec:	461a      	mov	r2, r3
 80009ee:	4603      	mov	r3, r0
 80009f0:	817b      	strh	r3, [r7, #10]
 80009f2:	460b      	mov	r3, r1
 80009f4:	813b      	strh	r3, [r7, #8]
 80009f6:	4613      	mov	r3, r2
 80009f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80009fa:	f7ff fc23 	bl	8000244 <HAL_GetTick>
 80009fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2b20      	cmp	r3, #32
 8000a0a:	f040 80d9 	bne.w	8000bc0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	2319      	movs	r3, #25
 8000a14:	2201      	movs	r2, #1
 8000a16:	496d      	ldr	r1, [pc, #436]	; (8000bcc <HAL_I2C_Mem_Write+0x1ec>)
 8000a18:	68f8      	ldr	r0, [r7, #12]
 8000a1a:	f000 f965 	bl	8000ce8 <I2C_WaitOnFlagUntilTimeout>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8000a24:	2302      	movs	r3, #2
 8000a26:	e0cc      	b.n	8000bc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d101      	bne.n	8000a36 <HAL_I2C_Mem_Write+0x56>
 8000a32:	2302      	movs	r3, #2
 8000a34:	e0c5      	b.n	8000bc2 <HAL_I2C_Mem_Write+0x1e2>
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d007      	beq.n	8000a5c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f042 0201 	orr.w	r2, r2, #1
 8000a5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2221      	movs	r2, #33	; 0x21
 8000a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2240      	movs	r2, #64	; 0x40
 8000a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	6a3a      	ldr	r2, [r7, #32]
 8000a86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4a4d      	ldr	r2, [pc, #308]	; (8000bd0 <HAL_I2C_Mem_Write+0x1f0>)
 8000a9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000a9e:	88f8      	ldrh	r0, [r7, #6]
 8000aa0:	893a      	ldrh	r2, [r7, #8]
 8000aa2:	8979      	ldrh	r1, [r7, #10]
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	9301      	str	r3, [sp, #4]
 8000aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	4603      	mov	r3, r0
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f000 f890 	bl	8000bd4 <I2C_RequestMemoryWrite>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d052      	beq.n	8000b60 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e081      	b.n	8000bc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000abe:	697a      	ldr	r2, [r7, #20]
 8000ac0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ac2:	68f8      	ldr	r0, [r7, #12]
 8000ac4:	f000 f9e6 	bl	8000e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d00d      	beq.n	8000aea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	d107      	bne.n	8000ae6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ae4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e06b      	b.n	8000bc2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aee:	781a      	ldrb	r2, [r3, #0]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afa:	1c5a      	adds	r2, r3, #1
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b04:	3b01      	subs	r3, #1
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	3b01      	subs	r3, #1
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	f003 0304 	and.w	r3, r3, #4
 8000b24:	2b04      	cmp	r3, #4
 8000b26:	d11b      	bne.n	8000b60 <HAL_I2C_Mem_Write+0x180>
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d017      	beq.n	8000b60 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b34:	781a      	ldrb	r2, [r3, #0]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b40:	1c5a      	adds	r2, r3, #1
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d1aa      	bne.n	8000abe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b68:	697a      	ldr	r2, [r7, #20]
 8000b6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f000 f9d2 	bl	8000f16 <I2C_WaitOnBTFFlagUntilTimeout>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d00d      	beq.n	8000b94 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	2b04      	cmp	r3, #4
 8000b7e:	d107      	bne.n	8000b90 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b8e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e016      	b.n	8000bc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ba2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2220      	movs	r2, #32
 8000ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e000      	b.n	8000bc2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8000bc0:	2302      	movs	r3, #2
  }
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	00100002 	.word	0x00100002
 8000bd0:	ffff0000 	.word	0xffff0000

08000bd4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af02      	add	r7, sp, #8
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	4608      	mov	r0, r1
 8000bde:	4611      	mov	r1, r2
 8000be0:	461a      	mov	r2, r3
 8000be2:	4603      	mov	r3, r0
 8000be4:	817b      	strh	r3, [r7, #10]
 8000be6:	460b      	mov	r3, r1
 8000be8:	813b      	strh	r3, [r7, #8]
 8000bea:	4613      	mov	r3, r2
 8000bec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bfc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	6a3b      	ldr	r3, [r7, #32]
 8000c04:	2200      	movs	r2, #0
 8000c06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000c0a:	68f8      	ldr	r0, [r7, #12]
 8000c0c:	f000 f86c 	bl	8000ce8 <I2C_WaitOnFlagUntilTimeout>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e05f      	b.n	8000cda <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000c1a:	897b      	ldrh	r3, [r7, #10]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	461a      	mov	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000c28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2c:	6a3a      	ldr	r2, [r7, #32]
 8000c2e:	492d      	ldr	r1, [pc, #180]	; (8000ce4 <I2C_RequestMemoryWrite+0x110>)
 8000c30:	68f8      	ldr	r0, [r7, #12]
 8000c32:	f000 f8b0 	bl	8000d96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e04c      	b.n	8000cda <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c58:	6a39      	ldr	r1, [r7, #32]
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f000 f91a 	bl	8000e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d00d      	beq.n	8000c82 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	d107      	bne.n	8000c7e <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e02b      	b.n	8000cda <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000c82:	88fb      	ldrh	r3, [r7, #6]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d105      	bne.n	8000c94 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000c88:	893b      	ldrh	r3, [r7, #8]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	611a      	str	r2, [r3, #16]
 8000c92:	e021      	b.n	8000cd8 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000c94:	893b      	ldrh	r3, [r7, #8]
 8000c96:	0a1b      	lsrs	r3, r3, #8
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ca4:	6a39      	ldr	r1, [r7, #32]
 8000ca6:	68f8      	ldr	r0, [r7, #12]
 8000ca8:	f000 f8f4 	bl	8000e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d00d      	beq.n	8000cce <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	d107      	bne.n	8000cca <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e005      	b.n	8000cda <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000cce:	893b      	ldrh	r3, [r7, #8]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	00010002 	.word	0x00010002

08000ce8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000cf8:	e025      	b.n	8000d46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d00:	d021      	beq.n	8000d46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d02:	f7ff fa9f 	bl	8000244 <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	683a      	ldr	r2, [r7, #0]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d302      	bcc.n	8000d18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d116      	bne.n	8000d46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2220      	movs	r2, #32
 8000d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f043 0220 	orr.w	r2, r3, #32
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e023      	b.n	8000d8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	0c1b      	lsrs	r3, r3, #16
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d10d      	bne.n	8000d6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	43da      	mvns	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	bf0c      	ite	eq
 8000d62:	2301      	moveq	r3, #1
 8000d64:	2300      	movne	r3, #0
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	461a      	mov	r2, r3
 8000d6a:	e00c      	b.n	8000d86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	4013      	ands	r3, r2
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	bf0c      	ite	eq
 8000d7e:	2301      	moveq	r3, #1
 8000d80:	2300      	movne	r3, #0
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	461a      	mov	r2, r3
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d0b6      	beq.n	8000cfa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b084      	sub	sp, #16
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
 8000da2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000da4:	e051      	b.n	8000e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000db4:	d123      	bne.n	8000dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000dce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2220      	movs	r2, #32
 8000dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	f043 0204 	orr.w	r2, r3, #4
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e046      	b.n	8000e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e04:	d021      	beq.n	8000e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e06:	f7ff fa1d 	bl	8000244 <HAL_GetTick>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d302      	bcc.n	8000e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d116      	bne.n	8000e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2220      	movs	r2, #32
 8000e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f043 0220 	orr.w	r2, r3, #32
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e020      	b.n	8000e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	0c1b      	lsrs	r3, r3, #16
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d10c      	bne.n	8000e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	bf14      	ite	ne
 8000e66:	2301      	movne	r3, #1
 8000e68:	2300      	moveq	r3, #0
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	e00b      	b.n	8000e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	43da      	mvns	r2, r3
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	bf14      	ite	ne
 8000e80:	2301      	movne	r3, #1
 8000e82:	2300      	moveq	r3, #0
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d18d      	bne.n	8000da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000ea0:	e02d      	b.n	8000efe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000ea2:	68f8      	ldr	r0, [r7, #12]
 8000ea4:	f000 f878 	bl	8000f98 <I2C_IsAcknowledgeFailed>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e02d      	b.n	8000f0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb8:	d021      	beq.n	8000efe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000eba:	f7ff f9c3 	bl	8000244 <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	68ba      	ldr	r2, [r7, #8]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d302      	bcc.n	8000ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d116      	bne.n	8000efe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2220      	movs	r2, #32
 8000eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f043 0220 	orr.w	r2, r3, #32
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e007      	b.n	8000f0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f08:	2b80      	cmp	r3, #128	; 0x80
 8000f0a:	d1ca      	bne.n	8000ea2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b084      	sub	sp, #16
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	60f8      	str	r0, [r7, #12]
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000f22:	e02d      	b.n	8000f80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000f24:	68f8      	ldr	r0, [r7, #12]
 8000f26:	f000 f837 	bl	8000f98 <I2C_IsAcknowledgeFailed>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e02d      	b.n	8000f90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3a:	d021      	beq.n	8000f80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f3c:	f7ff f982 	bl	8000244 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d302      	bcc.n	8000f52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d116      	bne.n	8000f80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2200      	movs	r2, #0
 8000f56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2220      	movs	r2, #32
 8000f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	f043 0220 	orr.w	r2, r3, #32
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e007      	b.n	8000f90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	d1ca      	bne.n	8000f24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fae:	d11b      	bne.n	8000fe8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000fb8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2220      	movs	r2, #32
 8000fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	f043 0204 	orr.w	r2, r3, #4
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e000      	b.n	8000fea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e31d      	b.n	8001642 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001006:	4b94      	ldr	r3, [pc, #592]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 030c 	and.w	r3, r3, #12
 800100e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001010:	4b91      	ldr	r3, [pc, #580]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001018:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b00      	cmp	r3, #0
 8001024:	d07b      	beq.n	800111e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	2b08      	cmp	r3, #8
 800102a:	d006      	beq.n	800103a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	2b0c      	cmp	r3, #12
 8001030:	d10f      	bne.n	8001052 <HAL_RCC_OscConfig+0x5e>
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001038:	d10b      	bne.n	8001052 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103a:	4b87      	ldr	r3, [pc, #540]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d06a      	beq.n	800111c <HAL_RCC_OscConfig+0x128>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d166      	bne.n	800111c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e2f7      	b.n	8001642 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d106      	bne.n	8001068 <HAL_RCC_OscConfig+0x74>
 800105a:	4b7f      	ldr	r3, [pc, #508]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a7e      	ldr	r2, [pc, #504]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 8001060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	e02d      	b.n	80010c4 <HAL_RCC_OscConfig+0xd0>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10c      	bne.n	800108a <HAL_RCC_OscConfig+0x96>
 8001070:	4b79      	ldr	r3, [pc, #484]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a78      	ldr	r2, [pc, #480]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 8001076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	4b76      	ldr	r3, [pc, #472]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a75      	ldr	r2, [pc, #468]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 8001082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	e01c      	b.n	80010c4 <HAL_RCC_OscConfig+0xd0>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b05      	cmp	r3, #5
 8001090:	d10c      	bne.n	80010ac <HAL_RCC_OscConfig+0xb8>
 8001092:	4b71      	ldr	r3, [pc, #452]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a70      	ldr	r2, [pc, #448]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 8001098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	4b6e      	ldr	r3, [pc, #440]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a6d      	ldr	r2, [pc, #436]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 80010a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	e00b      	b.n	80010c4 <HAL_RCC_OscConfig+0xd0>
 80010ac:	4b6a      	ldr	r3, [pc, #424]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a69      	ldr	r2, [pc, #420]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 80010b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b67      	ldr	r3, [pc, #412]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a66      	ldr	r2, [pc, #408]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 80010be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d013      	beq.n	80010f4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010cc:	f7ff f8ba 	bl	8000244 <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d4:	f7ff f8b6 	bl	8000244 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b64      	cmp	r3, #100	; 0x64
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e2ad      	b.n	8001642 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010e6:	4b5c      	ldr	r3, [pc, #368]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f0      	beq.n	80010d4 <HAL_RCC_OscConfig+0xe0>
 80010f2:	e014      	b.n	800111e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f4:	f7ff f8a6 	bl	8000244 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010fc:	f7ff f8a2 	bl	8000244 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b64      	cmp	r3, #100	; 0x64
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e299      	b.n	8001642 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800110e:	4b52      	ldr	r3, [pc, #328]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f0      	bne.n	80010fc <HAL_RCC_OscConfig+0x108>
 800111a:	e000      	b.n	800111e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d05a      	beq.n	80011e0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	2b04      	cmp	r3, #4
 800112e:	d005      	beq.n	800113c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	2b0c      	cmp	r3, #12
 8001134:	d119      	bne.n	800116a <HAL_RCC_OscConfig+0x176>
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d116      	bne.n	800116a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113c:	4b46      	ldr	r3, [pc, #280]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <HAL_RCC_OscConfig+0x160>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d001      	beq.n	8001154 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e276      	b.n	8001642 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001154:	4b40      	ldr	r3, [pc, #256]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	493d      	ldr	r1, [pc, #244]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 8001164:	4313      	orrs	r3, r2
 8001166:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001168:	e03a      	b.n	80011e0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d020      	beq.n	80011b4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001172:	4b3a      	ldr	r3, [pc, #232]	; (800125c <HAL_RCC_OscConfig+0x268>)
 8001174:	2201      	movs	r2, #1
 8001176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff f864 	bl	8000244 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001180:	f7ff f860 	bl	8000244 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e257      	b.n	8001642 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001192:	4b31      	ldr	r3, [pc, #196]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f0      	beq.n	8001180 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119e:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	492a      	ldr	r1, [pc, #168]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	604b      	str	r3, [r1, #4]
 80011b2:	e015      	b.n	80011e0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011b4:	4b29      	ldr	r3, [pc, #164]	; (800125c <HAL_RCC_OscConfig+0x268>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ba:	f7ff f843 	bl	8000244 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c2:	f7ff f83f 	bl	8000244 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e236      	b.n	8001642 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011d4:	4b20      	ldr	r3, [pc, #128]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f0      	bne.n	80011c2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 80b8 	beq.w	800135e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d170      	bne.n	80012d6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d005      	beq.n	800120c <HAL_RCC_OscConfig+0x218>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d101      	bne.n	800120c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e21a      	b.n	8001642 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a1a      	ldr	r2, [r3, #32]
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001218:	429a      	cmp	r2, r3
 800121a:	d921      	bls.n	8001260 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fbc1 	bl	80019a8 <RCC_SetFlashLatencyFromMSIRange>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e208      	b.n	8001642 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	4906      	ldr	r1, [pc, #24]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 800123e:	4313      	orrs	r3, r2
 8001240:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	061b      	lsls	r3, r3, #24
 8001250:	4901      	ldr	r1, [pc, #4]	; (8001258 <HAL_RCC_OscConfig+0x264>)
 8001252:	4313      	orrs	r3, r2
 8001254:	604b      	str	r3, [r1, #4]
 8001256:	e020      	b.n	800129a <HAL_RCC_OscConfig+0x2a6>
 8001258:	40023800 	.word	0x40023800
 800125c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001260:	4ba4      	ldr	r3, [pc, #656]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	49a1      	ldr	r1, [pc, #644]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 800126e:	4313      	orrs	r3, r2
 8001270:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001272:	4ba0      	ldr	r3, [pc, #640]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	061b      	lsls	r3, r3, #24
 8001280:	499c      	ldr	r1, [pc, #624]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 8001282:	4313      	orrs	r3, r2
 8001284:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fb8c 	bl	80019a8 <RCC_SetFlashLatencyFromMSIRange>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e1d3      	b.n	8001642 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a1b      	ldr	r3, [r3, #32]
 800129e:	0b5b      	lsrs	r3, r3, #13
 80012a0:	3301      	adds	r3, #1
 80012a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80012aa:	4a92      	ldr	r2, [pc, #584]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 80012ac:	6892      	ldr	r2, [r2, #8]
 80012ae:	0912      	lsrs	r2, r2, #4
 80012b0:	f002 020f 	and.w	r2, r2, #15
 80012b4:	4990      	ldr	r1, [pc, #576]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 80012b6:	5c8a      	ldrb	r2, [r1, r2]
 80012b8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80012ba:	4a90      	ldr	r2, [pc, #576]	; (80014fc <HAL_RCC_OscConfig+0x508>)
 80012bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012be:	4b90      	ldr	r3, [pc, #576]	; (8001500 <HAL_RCC_OscConfig+0x50c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7fe ff72 	bl	80001ac <HAL_InitTick>
 80012c8:	4603      	mov	r3, r0
 80012ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d045      	beq.n	800135e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	e1b5      	b.n	8001642 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d029      	beq.n	8001332 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012de:	4b89      	ldr	r3, [pc, #548]	; (8001504 <HAL_RCC_OscConfig+0x510>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e4:	f7fe ffae 	bl	8000244 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012ec:	f7fe ffaa 	bl	8000244 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e1a1      	b.n	8001642 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012fe:	4b7d      	ldr	r3, [pc, #500]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800130a:	4b7a      	ldr	r3, [pc, #488]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	4977      	ldr	r1, [pc, #476]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 8001318:	4313      	orrs	r3, r2
 800131a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800131c:	4b75      	ldr	r3, [pc, #468]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	061b      	lsls	r3, r3, #24
 800132a:	4972      	ldr	r1, [pc, #456]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 800132c:	4313      	orrs	r3, r2
 800132e:	604b      	str	r3, [r1, #4]
 8001330:	e015      	b.n	800135e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001332:	4b74      	ldr	r3, [pc, #464]	; (8001504 <HAL_RCC_OscConfig+0x510>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7fe ff84 	bl	8000244 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001340:	f7fe ff80 	bl	8000244 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e177      	b.n	8001642 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001352:	4b68      	ldr	r3, [pc, #416]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	2b00      	cmp	r3, #0
 8001368:	d030      	beq.n	80013cc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d016      	beq.n	80013a0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001372:	4b65      	ldr	r3, [pc, #404]	; (8001508 <HAL_RCC_OscConfig+0x514>)
 8001374:	2201      	movs	r2, #1
 8001376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001378:	f7fe ff64 	bl	8000244 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001380:	f7fe ff60 	bl	8000244 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e157      	b.n	8001642 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001392:	4b58      	ldr	r3, [pc, #352]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 8001394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0x38c>
 800139e:	e015      	b.n	80013cc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a0:	4b59      	ldr	r3, [pc, #356]	; (8001508 <HAL_RCC_OscConfig+0x514>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a6:	f7fe ff4d 	bl	8000244 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ae:	f7fe ff49 	bl	8000244 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e140      	b.n	8001642 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013c0:	4b4c      	ldr	r3, [pc, #304]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 80013c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f0      	bne.n	80013ae <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 80b5 	beq.w	8001544 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013de:	4b45      	ldr	r3, [pc, #276]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10d      	bne.n	8001406 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	4b42      	ldr	r3, [pc, #264]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	4a41      	ldr	r2, [pc, #260]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f4:	6253      	str	r3, [r2, #36]	; 0x24
 80013f6:	4b3f      	ldr	r3, [pc, #252]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001402:	2301      	movs	r3, #1
 8001404:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001406:	4b41      	ldr	r3, [pc, #260]	; (800150c <HAL_RCC_OscConfig+0x518>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140e:	2b00      	cmp	r3, #0
 8001410:	d118      	bne.n	8001444 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001412:	4b3e      	ldr	r3, [pc, #248]	; (800150c <HAL_RCC_OscConfig+0x518>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a3d      	ldr	r2, [pc, #244]	; (800150c <HAL_RCC_OscConfig+0x518>)
 8001418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800141e:	f7fe ff11 	bl	8000244 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001426:	f7fe ff0d 	bl	8000244 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b64      	cmp	r3, #100	; 0x64
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e104      	b.n	8001642 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001438:	4b34      	ldr	r3, [pc, #208]	; (800150c <HAL_RCC_OscConfig+0x518>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d106      	bne.n	800145a <HAL_RCC_OscConfig+0x466>
 800144c:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 800144e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001450:	4a28      	ldr	r2, [pc, #160]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 8001452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001456:	6353      	str	r3, [r2, #52]	; 0x34
 8001458:	e02d      	b.n	80014b6 <HAL_RCC_OscConfig+0x4c2>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10c      	bne.n	800147c <HAL_RCC_OscConfig+0x488>
 8001462:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 8001464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001466:	4a23      	ldr	r2, [pc, #140]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 8001468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800146c:	6353      	str	r3, [r2, #52]	; 0x34
 800146e:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 8001470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001472:	4a20      	ldr	r2, [pc, #128]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 8001474:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001478:	6353      	str	r3, [r2, #52]	; 0x34
 800147a:	e01c      	b.n	80014b6 <HAL_RCC_OscConfig+0x4c2>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b05      	cmp	r3, #5
 8001482:	d10c      	bne.n	800149e <HAL_RCC_OscConfig+0x4aa>
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 8001486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001488:	4a1a      	ldr	r2, [pc, #104]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 800148a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800148e:	6353      	str	r3, [r2, #52]	; 0x34
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 8001492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001494:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 8001496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149a:	6353      	str	r3, [r2, #52]	; 0x34
 800149c:	e00b      	b.n	80014b6 <HAL_RCC_OscConfig+0x4c2>
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 80014a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a2:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 80014a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014a8:	6353      	str	r3, [r2, #52]	; 0x34
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 80014ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ae:	4a11      	ldr	r2, [pc, #68]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 80014b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014b4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d015      	beq.n	80014ea <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014be:	f7fe fec1 	bl	8000244 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014c4:	e00a      	b.n	80014dc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c6:	f7fe febd 	bl	8000244 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e0b2      	b.n	8001642 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <HAL_RCC_OscConfig+0x500>)
 80014de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0ee      	beq.n	80014c6 <HAL_RCC_OscConfig+0x4d2>
 80014e8:	e023      	b.n	8001532 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ea:	f7fe feab 	bl	8000244 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014f0:	e019      	b.n	8001526 <HAL_RCC_OscConfig+0x532>
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	08002dfc 	.word	0x08002dfc
 80014fc:	20000628 	.word	0x20000628
 8001500:	20000000 	.word	0x20000000
 8001504:	42470020 	.word	0x42470020
 8001508:	42470680 	.word	0x42470680
 800150c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001510:	f7fe fe98 	bl	8000244 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	f241 3288 	movw	r2, #5000	; 0x1388
 800151e:	4293      	cmp	r3, r2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e08d      	b.n	8001642 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001526:	4b49      	ldr	r3, [pc, #292]	; (800164c <HAL_RCC_OscConfig+0x658>)
 8001528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800152a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1ee      	bne.n	8001510 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001532:	7ffb      	ldrb	r3, [r7, #31]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d105      	bne.n	8001544 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001538:	4b44      	ldr	r3, [pc, #272]	; (800164c <HAL_RCC_OscConfig+0x658>)
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	4a43      	ldr	r2, [pc, #268]	; (800164c <HAL_RCC_OscConfig+0x658>)
 800153e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001542:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	2b00      	cmp	r3, #0
 800154a:	d079      	beq.n	8001640 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	2b0c      	cmp	r3, #12
 8001550:	d056      	beq.n	8001600 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	2b02      	cmp	r3, #2
 8001558:	d13b      	bne.n	80015d2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155a:	4b3d      	ldr	r3, [pc, #244]	; (8001650 <HAL_RCC_OscConfig+0x65c>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7fe fe70 	bl	8000244 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001568:	f7fe fe6c 	bl	8000244 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e063      	b.n	8001642 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800157a:	4b34      	ldr	r3, [pc, #208]	; (800164c <HAL_RCC_OscConfig+0x658>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001586:	4b31      	ldr	r3, [pc, #196]	; (800164c <HAL_RCC_OscConfig+0x658>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001596:	4319      	orrs	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	430b      	orrs	r3, r1
 800159e:	492b      	ldr	r1, [pc, #172]	; (800164c <HAL_RCC_OscConfig+0x658>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015a4:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <HAL_RCC_OscConfig+0x65c>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015aa:	f7fe fe4b 	bl	8000244 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b2:	f7fe fe47 	bl	8000244 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e03e      	b.n	8001642 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015c4:	4b21      	ldr	r3, [pc, #132]	; (800164c <HAL_RCC_OscConfig+0x658>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x5be>
 80015d0:	e036      	b.n	8001640 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d2:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <HAL_RCC_OscConfig+0x65c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7fe fe34 	bl	8000244 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e0:	f7fe fe30 	bl	8000244 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e027      	b.n	8001642 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015f2:	4b16      	ldr	r3, [pc, #88]	; (800164c <HAL_RCC_OscConfig+0x658>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x5ec>
 80015fe:	e01f      	b.n	8001640 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	2b01      	cmp	r3, #1
 8001606:	d101      	bne.n	800160c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e01a      	b.n	8001642 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_RCC_OscConfig+0x658>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	429a      	cmp	r2, r3
 800161e:	d10d      	bne.n	800163c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162a:	429a      	cmp	r2, r3
 800162c:	d106      	bne.n	800163c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e000      	b.n	8001642 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3720      	adds	r7, #32
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	42470060 	.word	0x42470060

08001654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e11a      	b.n	800189e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001668:	4b8f      	ldr	r3, [pc, #572]	; (80018a8 <HAL_RCC_ClockConfig+0x254>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d919      	bls.n	80016aa <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d105      	bne.n	8001688 <HAL_RCC_ClockConfig+0x34>
 800167c:	4b8a      	ldr	r3, [pc, #552]	; (80018a8 <HAL_RCC_ClockConfig+0x254>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a89      	ldr	r2, [pc, #548]	; (80018a8 <HAL_RCC_ClockConfig+0x254>)
 8001682:	f043 0304 	orr.w	r3, r3, #4
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	4b87      	ldr	r3, [pc, #540]	; (80018a8 <HAL_RCC_ClockConfig+0x254>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f023 0201 	bic.w	r2, r3, #1
 8001690:	4985      	ldr	r1, [pc, #532]	; (80018a8 <HAL_RCC_ClockConfig+0x254>)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	4313      	orrs	r3, r2
 8001696:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001698:	4b83      	ldr	r3, [pc, #524]	; (80018a8 <HAL_RCC_ClockConfig+0x254>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d001      	beq.n	80016aa <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e0f9      	b.n	800189e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d008      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b6:	4b7d      	ldr	r3, [pc, #500]	; (80018ac <HAL_RCC_ClockConfig+0x258>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	497a      	ldr	r1, [pc, #488]	; (80018ac <HAL_RCC_ClockConfig+0x258>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 808e 	beq.w	80017f2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016de:	4b73      	ldr	r3, [pc, #460]	; (80018ac <HAL_RCC_ClockConfig+0x258>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d121      	bne.n	800172e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e0d7      	b.n	800189e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b03      	cmp	r3, #3
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016f6:	4b6d      	ldr	r3, [pc, #436]	; (80018ac <HAL_RCC_ClockConfig+0x258>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d115      	bne.n	800172e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e0cb      	b.n	800189e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d107      	bne.n	800171e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <HAL_RCC_ClockConfig+0x258>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d109      	bne.n	800172e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e0bf      	b.n	800189e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800171e:	4b63      	ldr	r3, [pc, #396]	; (80018ac <HAL_RCC_ClockConfig+0x258>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e0b7      	b.n	800189e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800172e:	4b5f      	ldr	r3, [pc, #380]	; (80018ac <HAL_RCC_ClockConfig+0x258>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f023 0203 	bic.w	r2, r3, #3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	495c      	ldr	r1, [pc, #368]	; (80018ac <HAL_RCC_ClockConfig+0x258>)
 800173c:	4313      	orrs	r3, r2
 800173e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001740:	f7fe fd80 	bl	8000244 <HAL_GetTick>
 8001744:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d112      	bne.n	8001774 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800174e:	e00a      	b.n	8001766 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001750:	f7fe fd78 	bl	8000244 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	; 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e09b      	b.n	800189e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001766:	4b51      	ldr	r3, [pc, #324]	; (80018ac <HAL_RCC_ClockConfig+0x258>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b08      	cmp	r3, #8
 8001770:	d1ee      	bne.n	8001750 <HAL_RCC_ClockConfig+0xfc>
 8001772:	e03e      	b.n	80017f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b03      	cmp	r3, #3
 800177a:	d112      	bne.n	80017a2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800177c:	e00a      	b.n	8001794 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800177e:	f7fe fd61 	bl	8000244 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	f241 3288 	movw	r2, #5000	; 0x1388
 800178c:	4293      	cmp	r3, r2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e084      	b.n	800189e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001794:	4b45      	ldr	r3, [pc, #276]	; (80018ac <HAL_RCC_ClockConfig+0x258>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b0c      	cmp	r3, #12
 800179e:	d1ee      	bne.n	800177e <HAL_RCC_ClockConfig+0x12a>
 80017a0:	e027      	b.n	80017f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d11d      	bne.n	80017e6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017aa:	e00a      	b.n	80017c2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ac:	f7fe fd4a 	bl	8000244 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e06d      	b.n	800189e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017c2:	4b3a      	ldr	r3, [pc, #232]	; (80018ac <HAL_RCC_ClockConfig+0x258>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	d1ee      	bne.n	80017ac <HAL_RCC_ClockConfig+0x158>
 80017ce:	e010      	b.n	80017f2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d0:	f7fe fd38 	bl	8000244 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	f241 3288 	movw	r2, #5000	; 0x1388
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e05b      	b.n	800189e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80017e6:	4b31      	ldr	r3, [pc, #196]	; (80018ac <HAL_RCC_ClockConfig+0x258>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1ee      	bne.n	80017d0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017f2:	4b2d      	ldr	r3, [pc, #180]	; (80018a8 <HAL_RCC_ClockConfig+0x254>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d219      	bcs.n	8001834 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d105      	bne.n	8001812 <HAL_RCC_ClockConfig+0x1be>
 8001806:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <HAL_RCC_ClockConfig+0x254>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a27      	ldr	r2, [pc, #156]	; (80018a8 <HAL_RCC_ClockConfig+0x254>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <HAL_RCC_ClockConfig+0x254>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 0201 	bic.w	r2, r3, #1
 800181a:	4923      	ldr	r1, [pc, #140]	; (80018a8 <HAL_RCC_ClockConfig+0x254>)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <HAL_RCC_ClockConfig+0x254>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d001      	beq.n	8001834 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e034      	b.n	800189e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	d008      	beq.n	8001852 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001840:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <HAL_RCC_ClockConfig+0x258>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	4917      	ldr	r1, [pc, #92]	; (80018ac <HAL_RCC_ClockConfig+0x258>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d009      	beq.n	8001872 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <HAL_RCC_ClockConfig+0x258>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	490f      	ldr	r1, [pc, #60]	; (80018ac <HAL_RCC_ClockConfig+0x258>)
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001872:	f000 f823 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 8001876:	4601      	mov	r1, r0
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_RCC_ClockConfig+0x258>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <HAL_RCC_ClockConfig+0x25c>)
 8001884:	5cd3      	ldrb	r3, [r2, r3]
 8001886:	fa21 f303 	lsr.w	r3, r1, r3
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <HAL_RCC_ClockConfig+0x260>)
 800188c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <HAL_RCC_ClockConfig+0x264>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fc8a 	bl	80001ac <HAL_InitTick>
 8001898:	4603      	mov	r3, r0
 800189a:	72fb      	strb	r3, [r7, #11]

  return status;
 800189c:	7afb      	ldrb	r3, [r7, #11]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023c00 	.word	0x40023c00
 80018ac:	40023800 	.word	0x40023800
 80018b0:	08002dfc 	.word	0x08002dfc
 80018b4:	20000628 	.word	0x20000628
 80018b8:	20000000 	.word	0x20000000

080018bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	b087      	sub	sp, #28
 80018c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80018c2:	4b26      	ldr	r3, [pc, #152]	; (800195c <HAL_RCC_GetSysClockFreq+0xa0>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d006      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x24>
 80018d2:	2b0c      	cmp	r3, #12
 80018d4:	d007      	beq.n	80018e6 <HAL_RCC_GetSysClockFreq+0x2a>
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d12c      	bne.n	8001934 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018da:	4b21      	ldr	r3, [pc, #132]	; (8001960 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018dc:	613b      	str	r3, [r7, #16]
      break;
 80018de:	e037      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018e0:	4b20      	ldr	r3, [pc, #128]	; (8001964 <HAL_RCC_GetSysClockFreq+0xa8>)
 80018e2:	613b      	str	r3, [r7, #16]
      break;
 80018e4:	e034      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	0c9b      	lsrs	r3, r3, #18
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	4a1e      	ldr	r2, [pc, #120]	; (8001968 <HAL_RCC_GetSysClockFreq+0xac>)
 80018f0:	5cd3      	ldrb	r3, [r2, r3]
 80018f2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	0d9b      	lsrs	r3, r3, #22
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	3301      	adds	r3, #1
 80018fe:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001900:	4b16      	ldr	r3, [pc, #88]	; (800195c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d008      	beq.n	800191e <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	4a15      	ldr	r2, [pc, #84]	; (8001964 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001910:	fb02 f203 	mul.w	r2, r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	fbb2 f3f3 	udiv	r3, r2, r3
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e007      	b.n	800192e <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001922:	fb02 f203 	mul.w	r2, r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	fbb2 f3f3 	udiv	r3, r2, r3
 800192c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	613b      	str	r3, [r7, #16]
      break;
 8001932:	e00d      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	0b5b      	lsrs	r3, r3, #13
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	613b      	str	r3, [r7, #16]
      break;
 800194e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001950:	693b      	ldr	r3, [r7, #16]
}
 8001952:	4618      	mov	r0, r3
 8001954:	371c      	adds	r7, #28
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr
 800195c:	40023800 	.word	0x40023800
 8001960:	00f42400 	.word	0x00f42400
 8001964:	007a1200 	.word	0x007a1200
 8001968:	08002df0 	.word	0x08002df0

0800196c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001970:	4b02      	ldr	r3, [pc, #8]	; (800197c <HAL_RCC_GetHCLKFreq+0x10>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	20000628 	.word	0x20000628

08001980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001984:	f7ff fff2 	bl	800196c <HAL_RCC_GetHCLKFreq>
 8001988:	4601      	mov	r1, r0
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	0a1b      	lsrs	r3, r3, #8
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	4a03      	ldr	r2, [pc, #12]	; (80019a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001996:	5cd3      	ldrb	r3, [r2, r3]
 8001998:	fa21 f303 	lsr.w	r3, r1, r3
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40023800 	.word	0x40023800
 80019a4:	08002e0c 	.word	0x08002e0c

080019a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019b0:	2300      	movs	r3, #0
 80019b2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80019b4:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d12c      	bne.n	8001a1a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019c0:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80019c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80019cc:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	e016      	b.n	8001a06 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d8:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	4a1f      	ldr	r2, [pc, #124]	; (8001a5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80019de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e2:	6253      	str	r3, [r2, #36]	; 0x24
 80019e4:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80019f0:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80019f8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	4a17      	ldr	r2, [pc, #92]	; (8001a5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a04:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001a0c:	d105      	bne.n	8001a1a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001a14:	d101      	bne.n	8001a1a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001a16:	2301      	movs	r3, #1
 8001a18:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d105      	bne.n	8001a2c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001a20:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0f      	ldr	r2, [pc, #60]	; (8001a64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f023 0201 	bic.w	r2, r3, #1
 8001a34:	490b      	ldr	r1, [pc, #44]	; (8001a64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d001      	beq.n	8001a4e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	371c      	adds	r7, #28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40007000 	.word	0x40007000
 8001a64:	40023c00 	.word	0x40023c00

08001a68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e056      	b.n	8001b28 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d106      	bne.n	8001a9a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 fc83 	bl	80023a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ab0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	431a      	orrs	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	ea42 0103 	orr.w	r1, r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	0c1b      	lsrs	r3, r3, #16
 8001af8:	f003 0104 	and.w	r1, r3, #4
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	69da      	ldr	r2, [r3, #28]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <OLED_WrCmd>:
	//HAL_SPI_Transmit_DMA(&hspi1, &dat, sizeof(dat));
}

#else
void OLED_WrCmd(uint8_t cmd)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af04      	add	r7, sp, #16
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x78, 0x00, 1, &cmd, 1, 100);
 8001b3a:	2364      	movs	r3, #100	; 0x64
 8001b3c:	9302      	str	r3, [sp, #8]
 8001b3e:	2301      	movs	r3, #1
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	1dfb      	adds	r3, r7, #7
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2301      	movs	r3, #1
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2178      	movs	r1, #120	; 0x78
 8001b4c:	4803      	ldr	r0, [pc, #12]	; (8001b5c <OLED_WrCmd+0x2c>)
 8001b4e:	f7fe ff47 	bl	80009e0 <HAL_I2C_Mem_Write>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	2000064c 	.word	0x2000064c

08001b60 <OLED_WrDat>:

void OLED_WrDat(uint8_t dat)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af04      	add	r7, sp, #16
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x78, 0x40, 1, &dat, 1, 100);
 8001b6a:	2364      	movs	r3, #100	; 0x64
 8001b6c:	9302      	str	r3, [sp, #8]
 8001b6e:	2301      	movs	r3, #1
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	1dfb      	adds	r3, r7, #7
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2301      	movs	r3, #1
 8001b78:	2240      	movs	r2, #64	; 0x40
 8001b7a:	2178      	movs	r1, #120	; 0x78
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <OLED_WrDat+0x2c>)
 8001b7e:	f7fe ff2f 	bl	80009e0 <HAL_I2C_Mem_Write>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	2000064c 	.word	0x2000064c

08001b90 <OLED_SetPos>:

#endif
void OLED_SetPos(unsigned char x, unsigned char y)
{ 
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	460a      	mov	r2, r1
 8001b9a:	71fb      	strb	r3, [r7, #7]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	71bb      	strb	r3, [r7, #6]
	OLED_WrCmd(0xb0+y);
 8001ba0:	79bb      	ldrb	r3, [r7, #6]
 8001ba2:	3b50      	subs	r3, #80	; 0x50
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff ffc2 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(((x&0xf0)>>4)|0x10);
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	091b      	lsrs	r3, r3, #4
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	f043 0310 	orr.w	r3, r3, #16
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ffb9 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd((x&0x0f)|0x01); 
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	f003 030e 	and.w	r3, r3, #14
 8001bc6:	b25b      	sxtb	r3, r3
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	b25b      	sxtb	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ffad 	bl	8001b30 <OLED_WrCmd>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <OLED_Fill>:


void OLED_Fill(unsigned char bmp_dat) 
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b084      	sub	sp, #16
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	71fb      	strb	r3, [r7, #7]
	unsigned char y,x;
	for(y=0;y<8;y++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	73fb      	strb	r3, [r7, #15]
 8001bec:	e01c      	b.n	8001c28 <OLED_Fill+0x4a>
	{
		OLED_WrCmd(0xb0+y);
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	3b50      	subs	r3, #80	; 0x50
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff9b 	bl	8001b30 <OLED_WrCmd>
		OLED_WrCmd(0x01);
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f7ff ff98 	bl	8001b30 <OLED_WrCmd>
		OLED_WrCmd(0x10);
 8001c00:	2010      	movs	r0, #16
 8001c02:	f7ff ff95 	bl	8001b30 <OLED_WrCmd>
		for(x=0;x<X_WIDTH;x++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	73bb      	strb	r3, [r7, #14]
 8001c0a:	e006      	b.n	8001c1a <OLED_Fill+0x3c>
		OLED_WrDat(bmp_dat);
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ffa6 	bl	8001b60 <OLED_WrDat>
		for(x=0;x<X_WIDTH;x++)
 8001c14:	7bbb      	ldrb	r3, [r7, #14]
 8001c16:	3301      	adds	r3, #1
 8001c18:	73bb      	strb	r3, [r7, #14]
 8001c1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	daf4      	bge.n	8001c0c <OLED_Fill+0x2e>
	for(y=0;y<8;y++)
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	3301      	adds	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	2b07      	cmp	r3, #7
 8001c2c:	d9df      	bls.n	8001bee <OLED_Fill+0x10>
	}
}
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <OLED_CLS>:


void OLED_CLS(void)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	af00      	add	r7, sp, #0
	OLED_Fill(0x00);
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f7ff ffcf 	bl	8001bde <OLED_Fill>
}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <OLED_Init>:
	OLED_WrCmd(0XAF);
}


void OLED_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2102      	movs	r1, #2
 8001c4c:	4831      	ldr	r0, [pc, #196]	; (8001d14 <OLED_Init+0xd0>)
 8001c4e:	f7fe fd87 	bl	8000760 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001c52:	2064      	movs	r0, #100	; 0x64
 8001c54:	f7fe fb00 	bl	8000258 <HAL_Delay>
	
#if CHIP_IS_SSD1306
	
	OLED_WrCmd(0xae);//--turn off oled panel
 8001c58:	20ae      	movs	r0, #174	; 0xae
 8001c5a:	f7ff ff69 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0x00);//---set low column address
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f7ff ff66 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0x10);//---set high column address
 8001c64:	2010      	movs	r0, #16
 8001c66:	f7ff ff63 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8001c6a:	2040      	movs	r0, #64	; 0x40
 8001c6c:	f7ff ff60 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0x81);//--set contrast control register
 8001c70:	2081      	movs	r0, #129	; 0x81
 8001c72:	f7ff ff5d 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(Brightness); // Set SEG Output Current Brightness
 8001c76:	20cf      	movs	r0, #207	; 0xcf
 8001c78:	f7ff ff5a 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0xa1);//--Set SEG/Column Mapping
 8001c7c:	20a1      	movs	r0, #161	; 0xa1
 8001c7e:	f7ff ff57 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0xc8);//Set COM/Row Scan Direction
 8001c82:	20c8      	movs	r0, #200	; 0xc8
 8001c84:	f7ff ff54 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0xa6);//--set normal display
 8001c88:	20a6      	movs	r0, #166	; 0xa6
 8001c8a:	f7ff ff51 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
 8001c8e:	20a8      	movs	r0, #168	; 0xa8
 8001c90:	f7ff ff4e 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0x3f);//--1/64 duty
 8001c94:	203f      	movs	r0, #63	; 0x3f
 8001c96:	f7ff ff4b 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0xd3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8001c9a:	20d3      	movs	r0, #211	; 0xd3
 8001c9c:	f7ff ff48 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0x00);//-not offset
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f7ff ff45 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
 8001ca6:	20d5      	movs	r0, #213	; 0xd5
 8001ca8:	f7ff ff42 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
 8001cac:	2080      	movs	r0, #128	; 0x80
 8001cae:	f7ff ff3f 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0xd9);//--set pre-charge period
 8001cb2:	20d9      	movs	r0, #217	; 0xd9
 8001cb4:	f7ff ff3c 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8001cb8:	20f1      	movs	r0, #241	; 0xf1
 8001cba:	f7ff ff39 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0xda);//--set com pins hardware configuration
 8001cbe:	20da      	movs	r0, #218	; 0xda
 8001cc0:	f7ff ff36 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0x12);
 8001cc4:	2012      	movs	r0, #18
 8001cc6:	f7ff ff33 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0xdb);//--set vcomh
 8001cca:	20db      	movs	r0, #219	; 0xdb
 8001ccc:	f7ff ff30 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0x40);//Set VCOM Deselect Level
 8001cd0:	2040      	movs	r0, #64	; 0x40
 8001cd2:	f7ff ff2d 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
 8001cd6:	2020      	movs	r0, #32
 8001cd8:	f7ff ff2a 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0x02);//
 8001cdc:	2002      	movs	r0, #2
 8001cde:	f7ff ff27 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0x8d);//--set Charge Pump enable/disable
 8001ce2:	208d      	movs	r0, #141	; 0x8d
 8001ce4:	f7ff ff24 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0x14);//--set(0x10) disable
 8001ce8:	2014      	movs	r0, #20
 8001cea:	f7ff ff21 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
 8001cee:	20a4      	movs	r0, #164	; 0xa4
 8001cf0:	f7ff ff1e 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7) 
 8001cf4:	20a6      	movs	r0, #166	; 0xa6
 8001cf6:	f7ff ff1b 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0xaf);//--turn on oled panel
 8001cfa:	20af      	movs	r0, #175	; 0xaf
 8001cfc:	f7ff ff18 	bl	8001b30 <OLED_WrCmd>
	OLED_WrCmd(0x40);     
	OLED_WrCmd(0xAF);    /*display ON*/
	
#endif
	
	OLED_Fill(0x00);
 8001d00:	2000      	movs	r0, #0
 8001d02:	f7ff ff6c 	bl	8001bde <OLED_Fill>
	OLED_SetPos(0,0); 	
 8001d06:	2100      	movs	r1, #0
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f7ff ff41 	bl	8001b90 <OLED_SetPos>
} 
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40020000 	.word	0x40020000

08001d18 <OLED_ShowChar>:


void OLED_ShowChar(unsigned char x, unsigned char y, unsigned char ch[10], unsigned char TextSize)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	603a      	str	r2, [r7, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
 8001d26:	460b      	mov	r3, r1
 8001d28:	71bb      	strb	r3, [r7, #6]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	717b      	strb	r3, [r7, #5]
	unsigned char c = 0,i = 0,j = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	737b      	strb	r3, [r7, #13]
 8001d32:	2300      	movs	r3, #0
 8001d34:	73fb      	strb	r3, [r7, #15]
 8001d36:	2300      	movs	r3, #0
 8001d38:	73bb      	strb	r3, [r7, #14]
	switch(TextSize)
 8001d3a:	797b      	ldrb	r3, [r7, #5]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d032      	beq.n	8001da6 <OLED_ShowChar+0x8e>
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d07e      	beq.n	8001e42 <OLED_ShowChar+0x12a>
				x += 8;
				j++;
			}
		}break;
	}
}
 8001d44:	e084      	b.n	8001e50 <OLED_ShowChar+0x138>
				c = ch[j] - 32;
 8001d46:	7bbb      	ldrb	r3, [r7, #14]
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	3b20      	subs	r3, #32
 8001d50:	737b      	strb	r3, [r7, #13]
				if(x > 126)
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	2b7e      	cmp	r3, #126	; 0x7e
 8001d56:	d904      	bls.n	8001d62 <OLED_ShowChar+0x4a>
					x = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	71fb      	strb	r3, [r7, #7]
					y++;
 8001d5c:	79bb      	ldrb	r3, [r7, #6]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	71bb      	strb	r3, [r7, #6]
				OLED_SetPos(x,y);
 8001d62:	79ba      	ldrb	r2, [r7, #6]
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff11 	bl	8001b90 <OLED_SetPos>
				for(i=0;i<6;i++)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	73fb      	strb	r3, [r7, #15]
 8001d72:	e00f      	b.n	8001d94 <OLED_ShowChar+0x7c>
					OLED_WrDat(F6x8[c][i]);
 8001d74:	7b7a      	ldrb	r2, [r7, #13]
 8001d76:	7bf9      	ldrb	r1, [r7, #15]
 8001d78:	4837      	ldr	r0, [pc, #220]	; (8001e58 <OLED_ShowChar+0x140>)
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4403      	add	r3, r0
 8001d84:	440b      	add	r3, r1
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fee9 	bl	8001b60 <OLED_WrDat>
				for(i=0;i<6;i++)
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	3301      	adds	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	2b05      	cmp	r3, #5
 8001d98:	d9ec      	bls.n	8001d74 <OLED_ShowChar+0x5c>
				x += 6;
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	3306      	adds	r3, #6
 8001d9e:	71fb      	strb	r3, [r7, #7]
				j++;
 8001da0:	7bbb      	ldrb	r3, [r7, #14]
 8001da2:	3301      	adds	r3, #1
 8001da4:	73bb      	strb	r3, [r7, #14]
			while(ch[j] != '\0')
 8001da6:	7bbb      	ldrb	r3, [r7, #14]
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1c9      	bne.n	8001d46 <OLED_ShowChar+0x2e>
		}break;
 8001db2:	e04d      	b.n	8001e50 <OLED_ShowChar+0x138>
				c = ch[j] - 32;
 8001db4:	7bbb      	ldrb	r3, [r7, #14]
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	4413      	add	r3, r2
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	3b20      	subs	r3, #32
 8001dbe:	737b      	strb	r3, [r7, #13]
				if(x > 120)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	2b78      	cmp	r3, #120	; 0x78
 8001dc4:	d904      	bls.n	8001dd0 <OLED_ShowChar+0xb8>
					x = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	71fb      	strb	r3, [r7, #7]
					y++;
 8001dca:	79bb      	ldrb	r3, [r7, #6]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	71bb      	strb	r3, [r7, #6]
				OLED_SetPos(x,y);
 8001dd0:	79ba      	ldrb	r2, [r7, #6]
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff feda 	bl	8001b90 <OLED_SetPos>
				for(i=0;i<8;i++)
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]
 8001de0:	e00b      	b.n	8001dfa <OLED_ShowChar+0xe2>
					OLED_WrDat(F8X16[c*16+i]);
 8001de2:	7b7b      	ldrb	r3, [r7, #13]
 8001de4:	011a      	lsls	r2, r3, #4
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	4413      	add	r3, r2
 8001dea:	4a1c      	ldr	r2, [pc, #112]	; (8001e5c <OLED_ShowChar+0x144>)
 8001dec:	5cd3      	ldrb	r3, [r2, r3]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff feb6 	bl	8001b60 <OLED_WrDat>
				for(i=0;i<8;i++)
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	3301      	adds	r3, #1
 8001df8:	73fb      	strb	r3, [r7, #15]
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	2b07      	cmp	r3, #7
 8001dfe:	d9f0      	bls.n	8001de2 <OLED_ShowChar+0xca>
				OLED_SetPos(x,y+1);
 8001e00:	79bb      	ldrb	r3, [r7, #6]
 8001e02:	3301      	adds	r3, #1
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	4611      	mov	r1, r2
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fec0 	bl	8001b90 <OLED_SetPos>
				for(i=0;i<8;i++)
 8001e10:	2300      	movs	r3, #0
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	e00c      	b.n	8001e30 <OLED_ShowChar+0x118>
					OLED_WrDat(F8X16[c*16+i+8]);
 8001e16:	7b7b      	ldrb	r3, [r7, #13]
 8001e18:	011a      	lsls	r2, r3, #4
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3308      	adds	r3, #8
 8001e20:	4a0e      	ldr	r2, [pc, #56]	; (8001e5c <OLED_ShowChar+0x144>)
 8001e22:	5cd3      	ldrb	r3, [r2, r3]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fe9b 	bl	8001b60 <OLED_WrDat>
				for(i=0;i<8;i++)
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	2b07      	cmp	r3, #7
 8001e34:	d9ef      	bls.n	8001e16 <OLED_ShowChar+0xfe>
				x += 8;
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	3308      	adds	r3, #8
 8001e3a:	71fb      	strb	r3, [r7, #7]
				j++;
 8001e3c:	7bbb      	ldrb	r3, [r7, #14]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	73bb      	strb	r3, [r7, #14]
			while(ch[j] != '\0')
 8001e42:	7bbb      	ldrb	r3, [r7, #14]
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1b2      	bne.n	8001db4 <OLED_ShowChar+0x9c>
		}break;
 8001e4e:	bf00      	nop
}
 8001e50:	bf00      	nop
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	080025d8 	.word	0x080025d8
 8001e5c:	08002800 	.word	0x08002800

08001e60 <OLED_ShowCN>:


void OLED_ShowCN(unsigned char x, unsigned char y, unsigned char N)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	71bb      	strb	r3, [r7, #6]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	717b      	strb	r3, [r7, #5]
	unsigned char wm=0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	73fb      	strb	r3, [r7, #15]
	unsigned int  adder=32*N;
 8001e76:	797b      	ldrb	r3, [r7, #5]
 8001e78:	015b      	lsls	r3, r3, #5
 8001e7a:	60bb      	str	r3, [r7, #8]
	OLED_SetPos(x , y);
 8001e7c:	79ba      	ldrb	r2, [r7, #6]
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fe84 	bl	8001b90 <OLED_SetPos>
	for(wm = 0;wm < 16;wm++)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73fb      	strb	r3, [r7, #15]
 8001e8c:	e00c      	b.n	8001ea8 <OLED_ShowCN+0x48>
	{
		OLED_WrDat(F16x16[adder]);
 8001e8e:	4a17      	ldr	r2, [pc, #92]	; (8001eec <OLED_ShowCN+0x8c>)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4413      	add	r3, r2
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fe62 	bl	8001b60 <OLED_WrDat>
		adder += 1;
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	60bb      	str	r3, [r7, #8]
	for(wm = 0;wm < 16;wm++)
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	2b0f      	cmp	r3, #15
 8001eac:	d9ef      	bls.n	8001e8e <OLED_ShowCN+0x2e>
	}
	OLED_SetPos(x,y + 1);
 8001eae:	79bb      	ldrb	r3, [r7, #6]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fe69 	bl	8001b90 <OLED_SetPos>
	for(wm = 0;wm < 16;wm++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]
 8001ec2:	e00c      	b.n	8001ede <OLED_ShowCN+0x7e>
	{
		OLED_WrDat(F16x16[adder]);
 8001ec4:	4a09      	ldr	r2, [pc, #36]	; (8001eec <OLED_ShowCN+0x8c>)
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	4413      	add	r3, r2
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fe47 	bl	8001b60 <OLED_WrDat>
		adder += 1;
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	60bb      	str	r3, [r7, #8]
	for(wm = 0;wm < 16;wm++)
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	3301      	adds	r3, #1
 8001edc:	73fb      	strb	r3, [r7, #15]
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	2b0f      	cmp	r3, #15
 8001ee2:	d9ef      	bls.n	8001ec4 <OLED_ShowCN+0x64>
	}
}
 8001ee4:	bf00      	nop
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000008 	.word	0x20000008

08001ef0 <OLED_DrawBMP>:


void OLED_DrawBMP(unsigned char x0,unsigned char y0,unsigned char x1,unsigned char y1,unsigned char BMP[])
{
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4604      	mov	r4, r0
 8001ef8:	4608      	mov	r0, r1
 8001efa:	4611      	mov	r1, r2
 8001efc:	461a      	mov	r2, r3
 8001efe:	4623      	mov	r3, r4
 8001f00:	71fb      	strb	r3, [r7, #7]
 8001f02:	4603      	mov	r3, r0
 8001f04:	71bb      	strb	r3, [r7, #6]
 8001f06:	460b      	mov	r3, r1
 8001f08:	717b      	strb	r3, [r7, #5]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	713b      	strb	r3, [r7, #4]
	unsigned int j=0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
	unsigned char x,y;

  if(y1%8==0)
 8001f12:	793b      	ldrb	r3, [r7, #4]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d103      	bne.n	8001f26 <OLED_DrawBMP+0x36>
		y = y1/8;
 8001f1e:	793b      	ldrb	r3, [r7, #4]
 8001f20:	08db      	lsrs	r3, r3, #3
 8001f22:	72bb      	strb	r3, [r7, #10]
 8001f24:	e004      	b.n	8001f30 <OLED_DrawBMP+0x40>
  else
		y = y1/8 + 1;
 8001f26:	793b      	ldrb	r3, [r7, #4]
 8001f28:	08db      	lsrs	r3, r3, #3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	72bb      	strb	r3, [r7, #10]
	for(y=y0;y<y1;y++)
 8001f30:	79bb      	ldrb	r3, [r7, #6]
 8001f32:	72bb      	strb	r3, [r7, #10]
 8001f34:	e01b      	b.n	8001f6e <OLED_DrawBMP+0x7e>
	{
		OLED_SetPos(x0,y);
 8001f36:	7aba      	ldrb	r2, [r7, #10]
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fe27 	bl	8001b90 <OLED_SetPos>
    for(x=x0;x<x1;x++)
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	72fb      	strb	r3, [r7, #11]
 8001f46:	e00b      	b.n	8001f60 <OLED_DrawBMP+0x70>
		{
			OLED_WrDat(BMP[j++]);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	60fa      	str	r2, [r7, #12]
 8001f4e:	6a3a      	ldr	r2, [r7, #32]
 8001f50:	4413      	add	r3, r2
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fe03 	bl	8001b60 <OLED_WrDat>
    for(x=x0;x<x1;x++)
 8001f5a:	7afb      	ldrb	r3, [r7, #11]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	72fb      	strb	r3, [r7, #11]
 8001f60:	7afa      	ldrb	r2, [r7, #11]
 8001f62:	797b      	ldrb	r3, [r7, #5]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d3ef      	bcc.n	8001f48 <OLED_DrawBMP+0x58>
	for(y=y0;y<y1;y++)
 8001f68:	7abb      	ldrb	r3, [r7, #10]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	72bb      	strb	r3, [r7, #10]
 8001f6e:	7aba      	ldrb	r2, [r7, #10]
 8001f70:	793b      	ldrb	r3, [r7, #4]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d3df      	bcc.n	8001f36 <OLED_DrawBMP+0x46>
		}
	}
}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd90      	pop	{r4, r7, pc}
	...

08001f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f86:	f7fe f8f9 	bl	800017c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f8a:	f000 f889 	bl	80020a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f8e:	f000 f939 	bl	8002204 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001f92:	f000 f8ff 	bl	8002194 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001f96:	f000 f8cf 	bl	8002138 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fa0:	4839      	ldr	r0, [pc, #228]	; (8002088 <main+0x108>)
 8001fa2:	f7fe fbdd 	bl	8000760 <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 8001fa6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001faa:	f7fe f955 	bl	8000258 <HAL_Delay>
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fb4:	4834      	ldr	r0, [pc, #208]	; (8002088 <main+0x108>)
 8001fb6:	f7fe fbd3 	bl	8000760 <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 8001fba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fbe:	f7fe f94b 	bl	8000258 <HAL_Delay>

  	OLED_Init();
 8001fc2:	f7ff fe3f 	bl	8001c44 <OLED_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  OLED_Fill(0xFF);
 8001fc6:	20ff      	movs	r0, #255	; 0xff
 8001fc8:	f7ff fe09 	bl	8001bde <OLED_Fill>
	  HAL_Delay(1000);
 8001fcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fd0:	f7fe f942 	bl	8000258 <HAL_Delay>
	  OLED_Fill(0x00);
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f7ff fe02 	bl	8001bde <OLED_Fill>
	  HAL_Delay(1000);
 8001fda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fde:	f7fe f93b 	bl	8000258 <HAL_Delay>
	  if(INCH == 0)
	{
	  OLED_ShowChar(0,0,( unsigned char *)"HelTecAutomation",1);
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	4a29      	ldr	r2, [pc, #164]	; (800208c <main+0x10c>)
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f7ff fe95 	bl	8001d18 <OLED_ShowChar>
	  OLED_ShowChar(5,1,( unsigned char *)"HOLLEWORLD",2);
 8001fee:	2302      	movs	r3, #2
 8001ff0:	4a27      	ldr	r2, [pc, #156]	; (8002090 <main+0x110>)
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	2005      	movs	r0, #5
 8001ff6:	f7ff fe8f 	bl	8001d18 <OLED_ShowChar>
	  OLED_ShowChar(5,4,( unsigned char *)"JUST DO TI",2);
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	4a25      	ldr	r2, [pc, #148]	; (8002094 <main+0x114>)
 8001ffe:	2104      	movs	r1, #4
 8002000:	2005      	movs	r0, #5
 8002002:	f7ff fe89 	bl	8001d18 <OLED_ShowChar>
	  OLED_ShowChar(34,7,( unsigned char *)"2018-08-2",1);
 8002006:	2301      	movs	r3, #1
 8002008:	4a23      	ldr	r2, [pc, #140]	; (8002098 <main+0x118>)
 800200a:	2107      	movs	r1, #7
 800200c:	2022      	movs	r0, #34	; 0x22
 800200e:	f7ff fe83 	bl	8001d18 <OLED_ShowChar>
	  HAL_Delay(3000);
 8002012:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002016:	f7fe f91f 	bl	8000258 <HAL_Delay>
	  OLED_CLS();
 800201a:	f7ff fe0c 	bl	8001c36 <OLED_CLS>
	  for(i=0; i<8; i++)
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	e018      	b.n	8002056 <main+0xd6>
	  {
		  OLED_ShowCN(i*16,0,i);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	b2db      	uxtb	r3, r3
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	b2db      	uxtb	r3, r3
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff ff14 	bl	8001e60 <OLED_ShowCN>
	  		OLED_ShowCN(i*16,2,i+8);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	b2d8      	uxtb	r0, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	3308      	adds	r3, #8
 8002046:	b2db      	uxtb	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	2102      	movs	r1, #2
 800204c:	f7ff ff08 	bl	8001e60 <OLED_ShowCN>
	  for(i=0; i<8; i++)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3301      	adds	r3, #1
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b07      	cmp	r3, #7
 800205a:	d9e3      	bls.n	8002024 <main+0xa4>
	  	}
	  	HAL_Delay(2000);
 800205c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002060:	f7fe f8fa 	bl	8000258 <HAL_Delay>
	  	OLED_CLS();
 8002064:	f7ff fde7 	bl	8001c36 <OLED_CLS>
	  	OLED_DrawBMP(0,0,132,8,BMP1);
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <main+0x11c>)
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	2308      	movs	r3, #8
 800206e:	2284      	movs	r2, #132	; 0x84
 8002070:	2100      	movs	r1, #0
 8002072:	2000      	movs	r0, #0
 8002074:	f7ff ff3c 	bl	8001ef0 <OLED_DrawBMP>
	  		}
	  		HAL_Delay(2000);
	  		OLED_CLS();
	  		OLED_DrawBMP(32,4,96,8,BMP3);
	  	}
	  	HAL_Delay(2000);
 8002078:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800207c:	f7fe f8ec 	bl	8000258 <HAL_Delay>
	  	OLED_CLS();
 8002080:	f7ff fdd9 	bl	8001c36 <OLED_CLS>
	  OLED_Fill(0xFF);
 8002084:	e79f      	b.n	8001fc6 <main+0x46>
 8002086:	bf00      	nop
 8002088:	40020400 	.word	0x40020400
 800208c:	080025a0 	.word	0x080025a0
 8002090:	080025b4 	.word	0x080025b4
 8002094:	080025c0 	.word	0x080025c0
 8002098:	080025cc 	.word	0x080025cc
 800209c:	20000208 	.word	0x20000208

080020a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b092      	sub	sp, #72	; 0x48
 80020a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	2234      	movs	r2, #52	; 0x34
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fa62 	bl	8002578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020b4:	463b      	mov	r3, r7
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	60da      	str	r2, [r3, #12]
 80020c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020c2:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <SystemClock_Config+0x94>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80020ca:	4a1a      	ldr	r2, [pc, #104]	; (8002134 <SystemClock_Config+0x94>)
 80020cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020d0:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020d2:	2302      	movs	r3, #2
 80020d4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020d6:	2301      	movs	r3, #1
 80020d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020da:	2310      	movs	r3, #16
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020de:	2302      	movs	r3, #2
 80020e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020e2:	2300      	movs	r3, #0
 80020e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80020e6:	2300      	movs	r3, #0
 80020e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80020ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe ff7d 	bl	8000ff4 <HAL_RCC_OscConfig>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002100:	f000 f8d6 	bl	80022b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002104:	230f      	movs	r3, #15
 8002106:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002108:	2303      	movs	r3, #3
 800210a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800210c:	2300      	movs	r3, #0
 800210e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002114:	2300      	movs	r3, #0
 8002116:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002118:	463b      	mov	r3, r7
 800211a:	2101      	movs	r1, #1
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fa99 	bl	8001654 <HAL_RCC_ClockConfig>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002128:	f000 f8c2 	bl	80022b0 <Error_Handler>
  }
}
 800212c:	bf00      	nop
 800212e:	3748      	adds	r7, #72	; 0x48
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40007000 	.word	0x40007000

08002138 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800213c:	4b12      	ldr	r3, [pc, #72]	; (8002188 <MX_I2C1_Init+0x50>)
 800213e:	4a13      	ldr	r2, [pc, #76]	; (800218c <MX_I2C1_Init+0x54>)
 8002140:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <MX_I2C1_Init+0x50>)
 8002144:	4a12      	ldr	r2, [pc, #72]	; (8002190 <MX_I2C1_Init+0x58>)
 8002146:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <MX_I2C1_Init+0x50>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <MX_I2C1_Init+0x50>)
 8002150:	2200      	movs	r2, #0
 8002152:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <MX_I2C1_Init+0x50>)
 8002156:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800215a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <MX_I2C1_Init+0x50>)
 800215e:	2200      	movs	r2, #0
 8002160:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <MX_I2C1_Init+0x50>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002168:	4b07      	ldr	r3, [pc, #28]	; (8002188 <MX_I2C1_Init+0x50>)
 800216a:	2200      	movs	r2, #0
 800216c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <MX_I2C1_Init+0x50>)
 8002170:	2200      	movs	r2, #0
 8002172:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002174:	4804      	ldr	r0, [pc, #16]	; (8002188 <MX_I2C1_Init+0x50>)
 8002176:	f7fe fb0b 	bl	8000790 <HAL_I2C_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002180:	f000 f896 	bl	80022b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}
 8002188:	2000064c 	.word	0x2000064c
 800218c:	40005400 	.word	0x40005400
 8002190:	000186a0 	.word	0x000186a0

08002194 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002198:	4b18      	ldr	r3, [pc, #96]	; (80021fc <MX_SPI1_Init+0x68>)
 800219a:	4a19      	ldr	r2, [pc, #100]	; (8002200 <MX_SPI1_Init+0x6c>)
 800219c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800219e:	4b17      	ldr	r3, [pc, #92]	; (80021fc <MX_SPI1_Init+0x68>)
 80021a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <MX_SPI1_Init+0x68>)
 80021a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021ac:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021ae:	4b13      	ldr	r3, [pc, #76]	; (80021fc <MX_SPI1_Init+0x68>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <MX_SPI1_Init+0x68>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <MX_SPI1_Init+0x68>)
 80021bc:	2200      	movs	r2, #0
 80021be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021c0:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <MX_SPI1_Init+0x68>)
 80021c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <MX_SPI1_Init+0x68>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021ce:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <MX_SPI1_Init+0x68>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021d4:	4b09      	ldr	r3, [pc, #36]	; (80021fc <MX_SPI1_Init+0x68>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021da:	4b08      	ldr	r3, [pc, #32]	; (80021fc <MX_SPI1_Init+0x68>)
 80021dc:	2200      	movs	r2, #0
 80021de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <MX_SPI1_Init+0x68>)
 80021e2:	220a      	movs	r2, #10
 80021e4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021e6:	4805      	ldr	r0, [pc, #20]	; (80021fc <MX_SPI1_Init+0x68>)
 80021e8:	f7ff fc3e 	bl	8001a68 <HAL_SPI_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80021f2:	f000 f85d 	bl	80022b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200006a0 	.word	0x200006a0
 8002200:	40013000 	.word	0x40013000

08002204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220a:	f107 030c 	add.w	r3, r7, #12
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	60da      	str	r2, [r3, #12]
 8002218:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800221a:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <MX_GPIO_Init+0xa0>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	4a21      	ldr	r2, [pc, #132]	; (80022a4 <MX_GPIO_Init+0xa0>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	61d3      	str	r3, [r2, #28]
 8002226:	4b1f      	ldr	r3, [pc, #124]	; (80022a4 <MX_GPIO_Init+0xa0>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002232:	4b1c      	ldr	r3, [pc, #112]	; (80022a4 <MX_GPIO_Init+0xa0>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	4a1b      	ldr	r2, [pc, #108]	; (80022a4 <MX_GPIO_Init+0xa0>)
 8002238:	f043 0302 	orr.w	r3, r3, #2
 800223c:	61d3      	str	r3, [r2, #28]
 800223e:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <MX_GPIO_Init+0xa0>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800224a:	2200      	movs	r2, #0
 800224c:	2106      	movs	r1, #6
 800224e:	4816      	ldr	r0, [pc, #88]	; (80022a8 <MX_GPIO_Init+0xa4>)
 8002250:	f7fe fa86 	bl	8000760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002254:	2200      	movs	r2, #0
 8002256:	f44f 7180 	mov.w	r1, #256	; 0x100
 800225a:	4814      	ldr	r0, [pc, #80]	; (80022ac <MX_GPIO_Init+0xa8>)
 800225c:	f7fe fa80 	bl	8000760 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002260:	2306      	movs	r3, #6
 8002262:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002264:	2301      	movs	r3, #1
 8002266:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	2300      	movs	r3, #0
 800226e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002270:	f107 030c 	add.w	r3, r7, #12
 8002274:	4619      	mov	r1, r3
 8002276:	480c      	ldr	r0, [pc, #48]	; (80022a8 <MX_GPIO_Init+0xa4>)
 8002278:	f7fe f8f4 	bl	8000464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800227c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002280:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002282:	2301      	movs	r3, #1
 8002284:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	2300      	movs	r3, #0
 800228c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228e:	f107 030c 	add.w	r3, r7, #12
 8002292:	4619      	mov	r1, r3
 8002294:	4805      	ldr	r0, [pc, #20]	; (80022ac <MX_GPIO_Init+0xa8>)
 8002296:	f7fe f8e5 	bl	8000464 <HAL_GPIO_Init>

}
 800229a:	bf00      	nop
 800229c:	3720      	adds	r7, #32
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40020000 	.word	0x40020000
 80022ac:	40020400 	.word	0x40020400

080022b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80022c2:	4b14      	ldr	r3, [pc, #80]	; (8002314 <HAL_MspInit+0x58>)
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	4a13      	ldr	r2, [pc, #76]	; (8002314 <HAL_MspInit+0x58>)
 80022c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022cc:	6253      	str	r3, [r2, #36]	; 0x24
 80022ce:	4b11      	ldr	r3, [pc, #68]	; (8002314 <HAL_MspInit+0x58>)
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022da:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <HAL_MspInit+0x58>)
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	4a0d      	ldr	r2, [pc, #52]	; (8002314 <HAL_MspInit+0x58>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6213      	str	r3, [r2, #32]
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_MspInit+0x58>)
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <HAL_MspInit+0x58>)
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	4a07      	ldr	r2, [pc, #28]	; (8002314 <HAL_MspInit+0x58>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fc:	6253      	str	r3, [r2, #36]	; 0x24
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_MspInit+0x58>)
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr
 8002314:	40023800 	.word	0x40023800

08002318 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a17      	ldr	r2, [pc, #92]	; (8002394 <HAL_I2C_MspInit+0x7c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d127      	bne.n	800238a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233a:	4b17      	ldr	r3, [pc, #92]	; (8002398 <HAL_I2C_MspInit+0x80>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	4a16      	ldr	r2, [pc, #88]	; (8002398 <HAL_I2C_MspInit+0x80>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	61d3      	str	r3, [r2, #28]
 8002346:	4b14      	ldr	r3, [pc, #80]	; (8002398 <HAL_I2C_MspInit+0x80>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002352:	23c0      	movs	r3, #192	; 0xc0
 8002354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002356:	2312      	movs	r3, #18
 8002358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800235a:	2301      	movs	r3, #1
 800235c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235e:	2303      	movs	r3, #3
 8002360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002362:	2304      	movs	r3, #4
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	4619      	mov	r1, r3
 800236c:	480b      	ldr	r0, [pc, #44]	; (800239c <HAL_I2C_MspInit+0x84>)
 800236e:	f7fe f879 	bl	8000464 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_I2C_MspInit+0x80>)
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	4a08      	ldr	r2, [pc, #32]	; (8002398 <HAL_I2C_MspInit+0x80>)
 8002378:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800237c:	6253      	str	r3, [r2, #36]	; 0x24
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_I2C_MspInit+0x80>)
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800238a:	bf00      	nop
 800238c:	3728      	adds	r7, #40	; 0x28
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40005400 	.word	0x40005400
 8002398:	40023800 	.word	0x40023800
 800239c:	40020400 	.word	0x40020400

080023a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	; 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a17      	ldr	r2, [pc, #92]	; (800241c <HAL_SPI_MspInit+0x7c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d127      	bne.n	8002412 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023c2:	4b17      	ldr	r3, [pc, #92]	; (8002420 <HAL_SPI_MspInit+0x80>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	4a16      	ldr	r2, [pc, #88]	; (8002420 <HAL_SPI_MspInit+0x80>)
 80023c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023cc:	6213      	str	r3, [r2, #32]
 80023ce:	4b14      	ldr	r3, [pc, #80]	; (8002420 <HAL_SPI_MspInit+0x80>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <HAL_SPI_MspInit+0x80>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	4a10      	ldr	r2, [pc, #64]	; (8002420 <HAL_SPI_MspInit+0x80>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	61d3      	str	r3, [r2, #28]
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <HAL_SPI_MspInit+0x80>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80023f2:	23a0      	movs	r3, #160	; 0xa0
 80023f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fe:	2303      	movs	r3, #3
 8002400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002402:	2305      	movs	r3, #5
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002406:	f107 0314 	add.w	r3, r7, #20
 800240a:	4619      	mov	r1, r3
 800240c:	4805      	ldr	r0, [pc, #20]	; (8002424 <HAL_SPI_MspInit+0x84>)
 800240e:	f7fe f829 	bl	8000464 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002412:	bf00      	nop
 8002414:	3728      	adds	r7, #40	; 0x28
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40013000 	.word	0x40013000
 8002420:	40023800 	.word	0x40023800
 8002424:	40020000 	.word	0x40020000

08002428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <HardFault_Handler+0x4>

0800243a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800243e:	e7fe      	b.n	800243e <MemManage_Handler+0x4>

08002440 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <BusFault_Handler+0x4>

08002446 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800244a:	e7fe      	b.n	800244a <UsageFault_Handler+0x4>

0800244c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002474:	f7fd fed4 	bl	8000220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}

0800247c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8002480:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <SystemInit+0x5c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a14      	ldr	r2, [pc, #80]	; (80024d8 <SystemInit+0x5c>)
 8002486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248a:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <SystemInit+0x5c>)
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	4911      	ldr	r1, [pc, #68]	; (80024d8 <SystemInit+0x5c>)
 8002492:	4b12      	ldr	r3, [pc, #72]	; (80024dc <SystemInit+0x60>)
 8002494:	4013      	ands	r3, r2
 8002496:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <SystemInit+0x5c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a0e      	ldr	r2, [pc, #56]	; (80024d8 <SystemInit+0x5c>)
 800249e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80024a2:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80024a6:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <SystemInit+0x5c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <SystemInit+0x5c>)
 80024ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b2:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80024b4:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <SystemInit+0x5c>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <SystemInit+0x5c>)
 80024ba:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80024be:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <SystemInit+0x5c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <SystemInit+0x64>)
 80024c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024cc:	609a      	str	r2, [r3, #8]
#endif
}
 80024ce:	bf00      	nop
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800
 80024dc:	88ffc00c 	.word	0x88ffc00c
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80024e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80024e6:	e003      	b.n	80024f0 <LoopCopyDataInit>

080024e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80024ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80024ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80024ee:	3104      	adds	r1, #4

080024f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80024f0:	480a      	ldr	r0, [pc, #40]	; (800251c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80024f2:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80024f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80024f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80024f8:	d3f6      	bcc.n	80024e8 <CopyDataInit>
  ldr r2, =_sbss
 80024fa:	4a0a      	ldr	r2, [pc, #40]	; (8002524 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80024fc:	e002      	b.n	8002504 <LoopFillZerobss>

080024fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80024fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002500:	f842 3b04 	str.w	r3, [r2], #4

08002504 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002506:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002508:	d3f9      	bcc.n	80024fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800250a:	f7ff ffb7 	bl	800247c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800250e:	f000 f80f 	bl	8002530 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002512:	f7ff fd35 	bl	8001f80 <main>
  bx lr
 8002516:	4770      	bx	lr
  ldr r3, =_sidata
 8002518:	08002e1c 	.word	0x08002e1c
  ldr r0, =_sdata
 800251c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002520:	2000062c 	.word	0x2000062c
  ldr r2, =_sbss
 8002524:	2000062c 	.word	0x2000062c
  ldr r3, = _ebss
 8002528:	200006f8 	.word	0x200006f8

0800252c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800252c:	e7fe      	b.n	800252c <ADC1_IRQHandler>
	...

08002530 <__libc_init_array>:
 8002530:	b570      	push	{r4, r5, r6, lr}
 8002532:	2500      	movs	r5, #0
 8002534:	4e0c      	ldr	r6, [pc, #48]	; (8002568 <__libc_init_array+0x38>)
 8002536:	4c0d      	ldr	r4, [pc, #52]	; (800256c <__libc_init_array+0x3c>)
 8002538:	1ba4      	subs	r4, r4, r6
 800253a:	10a4      	asrs	r4, r4, #2
 800253c:	42a5      	cmp	r5, r4
 800253e:	d109      	bne.n	8002554 <__libc_init_array+0x24>
 8002540:	f000 f822 	bl	8002588 <_init>
 8002544:	2500      	movs	r5, #0
 8002546:	4e0a      	ldr	r6, [pc, #40]	; (8002570 <__libc_init_array+0x40>)
 8002548:	4c0a      	ldr	r4, [pc, #40]	; (8002574 <__libc_init_array+0x44>)
 800254a:	1ba4      	subs	r4, r4, r6
 800254c:	10a4      	asrs	r4, r4, #2
 800254e:	42a5      	cmp	r5, r4
 8002550:	d105      	bne.n	800255e <__libc_init_array+0x2e>
 8002552:	bd70      	pop	{r4, r5, r6, pc}
 8002554:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002558:	4798      	blx	r3
 800255a:	3501      	adds	r5, #1
 800255c:	e7ee      	b.n	800253c <__libc_init_array+0xc>
 800255e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002562:	4798      	blx	r3
 8002564:	3501      	adds	r5, #1
 8002566:	e7f2      	b.n	800254e <__libc_init_array+0x1e>
 8002568:	08002e14 	.word	0x08002e14
 800256c:	08002e14 	.word	0x08002e14
 8002570:	08002e14 	.word	0x08002e14
 8002574:	08002e18 	.word	0x08002e18

08002578 <memset>:
 8002578:	4603      	mov	r3, r0
 800257a:	4402      	add	r2, r0
 800257c:	4293      	cmp	r3, r2
 800257e:	d100      	bne.n	8002582 <memset+0xa>
 8002580:	4770      	bx	lr
 8002582:	f803 1b01 	strb.w	r1, [r3], #1
 8002586:	e7f9      	b.n	800257c <memset+0x4>

08002588 <_init>:
 8002588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258a:	bf00      	nop
 800258c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800258e:	bc08      	pop	{r3}
 8002590:	469e      	mov	lr, r3
 8002592:	4770      	bx	lr

08002594 <_fini>:
 8002594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002596:	bf00      	nop
 8002598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800259a:	bc08      	pop	{r3}
 800259c:	469e      	mov	lr, r3
 800259e:	4770      	bx	lr
